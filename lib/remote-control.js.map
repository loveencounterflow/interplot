{
  "version": 3,
  "file": "remote-control.js",
  "sourceRoot": "..",
  "sources": [
    "src/remote-control.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/REMOTE-CONTROL'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\n# #...........................................................................................................\n# # DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n# DATOM                     = require 'datom'\n# { new_datom\n#   stamp\n#   lets\n#   select }                = DATOM.export()\n# #...........................................................................................................\n# SP                        = require 'steampipes'\n# # SP                        = require '../../apps/steampipes'\n# { $\n#   $async\n#   $drain\n#   $watch\n#   $show  }                = SP.export()\n# #...........................................................................................................\n# after                     = ( dts, f ) -> setTimeout f, dts * 1000\n# sleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n# # page_html_path            = PATH.resolve PATH.join __dirname, '../../../public/main.html'\n# LINEMAKER                 = require '../linemaker'\n# # PUPPETEER                 = require 'puppeteer'\n# INTERTEXT                 = require 'intertext'\n# { HTML, }                 = INTERTEXT\n# #...........................................................................................................\n# DATAMILL                  = {}\n# DEMO                      = {}\n# INTERPLOT                 = {}\n# _settings                 = DATOM.freeze require '../settings'\nPUPPETEER                 = require 'puppeteer'\n### NOTE consider to use https://github.com/TehShrike/deepmerge ###\nmerge                     = require 'lodash.merge'\n\n#-----------------------------------------------------------------------------------------------------------\n@_echo_browser_console = ( c ) =>\n  linenr      = c._location?.lineNumber ? '?'\n  path        = c._location?.url        ? '???'\n  short_path  = path\n  if ( match = path.match /^file:\\/\\/(?<path>.+)$/ )?\n    short_path = PATH.relative process.cwd(), PATH.resolve FS.realpathSync match.groups.path\n  path        = short_path unless short_path.startsWith '../'\n  location    = \"#{path}:#{linenr}\"\n  text        = c._text ? '???'\n  #.........................................................................................................\n  if c._type is 'error'\n    settings.has_error = true\n    warn \"#{location}:\", text\n    if ( settings.close?.on_error ? false )\n      after 3, => process.exit 1\n    # throw new Error text\n  #.........................................................................................................\n  else\n    whisper \"#{location}:\", text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@clear_metrics = ( me ) ->\n  await me.page._client.send 'Emulation.clearDeviceMetricsOverride'\n\n#-----------------------------------------------------------------------------------------------------------\n@emulate_media = ( me ) ->\n  await me.page.emulateMediaType me.emulate_media ? 'print'\n  # await me.page.emulateMedia null\n  # debug '^4432^', await me.page.evaluate -> ( matchMedia 'print' ).matches\n  # await me.page.emulate PUPPETEER.devices[ 'Galaxy Note 3 landscape' ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fetch_old_or_new_page = ( me ) ->\n  return await me.browser.newPage() if isa.empty ( pages = await me.browser.pages() )\n  return pages[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@new_remote_control = ( settings ) ->\n  R                           = {}\n  settings                    = merge {}, ( require './settings' ), settings\n  settings.puppeteer.headless = not settings.gui ? true\n  browser_settings            = settings[ settings.use_profile ? 'puppeteer' ]\n  R.browser                   = await PUPPETEER.launch browser_settings\n  # context                     = await R.browser.newContext()\n  # R.page                      = await context.newPage()\n  R.page                      = await @fetch_old_or_new_page R\n  #.........................................................................................................\n  ### try to avoid 'slow network' notifications; also, no need for non-local content ATM: ###\n  await R.page.setOfflineMode true\n  #.........................................................................................................\n  page_loaded                 = new Promise ( resolve ) => R.page.once 'load', => resolve()\n  await R.page.goto settings.url if settings.url?\n  await page_loaded\n  # await @emulate_media R ### TAINT causes columns to be hidden behind artboard (?) ###\n  await @clear_metrics R\n  await R.page.waitForSelector settings.wait_for_selector if settings.wait_for_selector?\n  #.........................................................................................................\n  R.page.on 'error', ( error ) => throw error\n  R.page.on 'console', @_echo_browser_console\n  #.........................................................................................................\n  return R\n\n\n\n###\n@resize_window = ( width, height ) ->\n  # thx to https://gist.github.com/garywu/bcb9259da58c1e70044355b77c9e1078\n  # see https://github.com/Codeception/CodeceptJS/issues/973\n    await this.page.setViewport({height, width});\n    // Window frame - probably OS and WM dependent.\n    height += 85;\n    // Any tab.\n    const {targetInfos: [{targetId}]} = await this.browser._connection.send(\n      'Target.getTargets'\n    );\n    // Tab window.\n    const {windowId} = await this.browser._connection.send(\n      'Browser.getWindowForTarget',\n      {targetId}\n    );\n    // Resize.\n    await this.browser._connection.send('Browser.setWindowBounds', {\n      bounds: {height, width},\n      windowId\n###\n\n\n"
  ]
}