// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, FS, PATH, PUPPETEER, after, alert, assign, badge, cast, debug, demo_2, echo_browser_console, get_page, help, info, isa, join_path, jr, page_html_path, rpr, settings, sleep, take_screenshot, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERPLOT/DEMO-PUPPETEER';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  PATH = require('path');

  FS = require('fs');

  ({jr} = CND);

  assign = Object.assign;

  join_path = function(...P) {
    return PATH.resolve(PATH.join(...P));
  };

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, cast, type_of} = types);

  //...........................................................................................................
  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  sleep = function(dts) {
    return new Promise(function(done) {
      return after(dts, done);
    });
  };

  page_html_path = PATH.resolve(PATH.join(__dirname, '../../public/main.html'));

  PUPPETEER = require('puppeteer');

  //-----------------------------------------------------------------------------------------------------------
  settings = {
    has_error: false,
    close: {
      on_finish: true,
      on_error: false
    },
    puppeteer: {
      headless: false,
      // defaultViweport:
      //   deviceScaleFactor:  0.5
      args: [
        '--disable-infobars', // hide 'Chrome is being controlled by ...'
        '--no-first-run',
        // '--incognito'
        // process.env.NODE_ENV === "production" ? "--kiosk" : null
        '--allow-file-access-from-files',
        '--no-sandbox',
        '--disable-setuid-sandbox',
        // '--start-fullscreen'
        '--start-maximized'
      ]
    },
    screenshot: {
      path: PATH.resolve(__dirname, '../.cache/chart.png'),
      omitBackground: false,
      // fullPage:         true
      fullPage: false,
      type: 'png'
    }
  };

  // clip:
  //   x:                0
  //   y:                0
  //   width:            500
  //   height:           500

  //-----------------------------------------------------------------------------------------------------------
  echo_browser_console = (c) => {
    var ref, ref1, ref2;
    if ((ref = c._type) !== 'log') {
      whisper((rpr(c)).slice(0, 501));
    }
    if (c._type === 'error') {
      settings.has_error = true;
      warn('µ37763', 'console:', c._text);
      if ((ref1 = (ref2 = settings.close) != null ? ref2.on_error : void 0) != null ? ref1 : false) {
        after(3, () => {
          return process.exit(1);
        });
      }
    } else {
      // throw new Error c._text
      //.........................................................................................................
      info('µ37763', 'console:', c._text);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  get_page = async function(browser) {
    var R, pages;
    if (isa.empty((pages = (await browser.pages())))) {
      urge("µ29923-2 new page");
      R = (await browser.newPage());
    } else {
      urge("µ29923-2 use existing page");
      R = pages[0];
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  take_screenshot = async function(page) {
    var chart_dom, screenshot_written;
    screenshot_written = false;
    if (settings.screenshot.fullPage) {
      urge("µ29923-6 take screenshot");
      await page.screenshot(settings.screenshot);
      screenshot_written = true;
    } else {
      urge("µ29923-5 page goto");
      chart_dom = (await page.$('#chart'));
      if (chart_dom != null) {
        urge("µ29923-6 take screenshot");
        await chart_dom.screenshot(settings.screenshot);
        screenshot_written = true;
      } else {
        warn("unable to take screenshot: DOM element not found");
      }
    }
    if (screenshot_written) {
      help(`output written to ${PATH.relative(process.cwd(), settings.screenshot.path)}`);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  demo_2 = async function() {
    var browser, page, ref;
    // Set up browser and page.
    urge("µ29923-1 launching browser");
    browser = (await PUPPETEER.launch(settings.puppeteer));
    page = (await get_page(browser));
    page.setViewport({
      width: 1200,
      height: 1200
    });
    page.on('error', (error) => {
      throw error;
    });
    page.on('console', echo_browser_console);
    urge("µ29923-3 page goto");
    await page.goto('file:///home/flow/io/interplot/public/main.html');
    // urge "µ29923-3 page goto";          await page.goto 'https://de.wikipedia.org/wiki/Berlin'
    // urge "µ29923-3 page goto";          await page.goto 'http://google.com'
    urge("µ29923-4 page goto");
    await page.waitForSelector('#chart');
    urge("µ29923-4 page goto");
    await page.waitForSelector('#chart_ready', {
      timeout: 600e3
    });
    await take_screenshot(page);
    if ((typeof settings.close === "function" ? settings.close(typeof auto !== "undefined" && auto !== null ? auto : false) : void 0) && ((ref = !settings.has_error) != null ? ref : false)) {
      urge("µ29923-8 close");
      browser.close();
    }
    return urge("µ29923-9 done");
  };

  //###########################################################################################################
  if (module.parent == null) {
    (async() => {
      // await sleep 5
      await demo_2();
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=start-browser.js.map
