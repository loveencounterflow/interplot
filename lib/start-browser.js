// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, CND, FS, PATH, PD, PUPPETEER, after, alert, assign, async, badge, debug, demo_2, echo_browser_console, get_page, help, info, isa, join_path, jr, page_html_path, rpr, settings, urge, warn, whisper;

  //###########################################################################################################
  require('./exception-handler');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERPLOT/DEMO-PUPPETEER';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  PATH = require('path');

  FS = require('fs');

  ({jr} = CND);

  assign = Object.assign;

  join_path = function(...P) {
    return PATH.resolve(PATH.join(...P));
  };

  //...........................................................................................................
  isa = require('intertype');

  PD = require('pipedreams');

  ({$, async} = PD);

  //...........................................................................................................
  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  page_html_path = PATH.resolve(PATH.join(__dirname, '../../public/main.html'));

  PUPPETEER = require('puppeteer');

  //-----------------------------------------------------------------------------------------------------------
  settings = {
    has_error: false,
    close: {
      on_finish: true,
      on_error: false
    },
    puppeteer: {
      headless: false,
      deviceScaleFactor: 2,
      args: [
        '--disable-infobars', // hide 'Chrome is being controlled by ...'
        '--no-first-run',
        // '--incognito'
        // process.env.NODE_ENV === "production" ? "--kiosk" : null
        '--allow-file-access-from-files',
        '--no-sandbox',
        '--disable-setuid-sandbox'
      ]
    }
  };

  // #-----------------------------------------------------------------------------------------------------------
  // getImageContent = ( page, url ) =>
  //   frameId = String page.mainFrame()._id
  //   debug 'µ37744', 'frameId', rpr frameId
  //   debug 'µ37744', 'url', rpr url
  //   { content, base64Encoded } = await page._client.send 'Page.getResourceContent', { frameId, url }
  //   unless base64Encoded
  //     throw new Error "µ34774", 'expected base64Encoded'
  //   return content

  //-----------------------------------------------------------------------------------------------------------
  echo_browser_console = (c) => {
    var ref, ref1;
    whisper(c);
    if (c._type === 'error') {
      settings.has_error = true;
      warn('µ37763', 'console:', c._text);
      if ((ref = (ref1 = settings.close) != null ? ref1.on_error : void 0) != null ? ref : false) {
        after(3, () => {
          return process.exit(1);
        });
      }
    } else {
      // throw new Error c._text
      //.........................................................................................................
      info('µ37763', 'console:', c._text);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  get_page = async function(browser) {
    var R, pages;
    if (isa.empty((pages = (await browser.pages())))) {
      urge("µ29923-2 new page");
      R = (await browser.newPage());
    } else {
      urge("µ29923-2 use existing page");
      R = pages[0];
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  demo_2 = async function() {
    var browser, page, ref, svg_path, svg_txt;
    // Set up browser and page.
    urge("µ29923-1 launching browser");
    browser = (await PUPPETEER.launch(settings.puppeteer));
    page = (await get_page(browser));
    page.setViewport({
      width: 1280,
      height: 926
    });
    page.on('error', (error) => {
      throw error;
    });
    page.on('console', echo_browser_console);
    urge("µ29923-3 page goto");
    await page.goto('file:///home/flow/io/interplot/public/main.html');
    // urge "µ29923-4 page goto";          await page.waitForSelector '#my_dataviz'
    // urge "µ29923-5 page goto";          svg_image = await page.$ '#my_dataviz'
    // urge "µ29923-6 take screenshot";    await svg_image.screenshot { path: 'logo-screenshot.png', omitBackground: false, }
    // # #.........................................................................................................
    // # try
    // #   urge "µ29923-7 get SVG"
    // #   url           = await page.evaluate => ( document.querySelector '#my_dataviz' ).src
    // #   content       = await getImageContent page, url
    // #   contentBuffer = Buffer.from content, 'base64'
    // #   fs.writeFileSync 'logo-extracted.svg', contentBuffer, 'base64'
    // # catch error
    // #   warn error
    // #.........................................................................................................
    /* TAINT how to make sure drawing chart has finished? */
    svg_txt = (await page.evaluate(() => {
      return (jQuery('#chart svg'))[0].outerHTML;
    }));
    svg_path = join_path(__dirname, '../.cache/chart.svg');
    FS.writeFileSync(svg_path, svg_txt);
    help(`output written to ${PATH.relative(process.cwd(), svg_path)}`);
    if ((typeof settings.close === "function" ? settings.close(typeof auto !== "undefined" && auto !== null ? auto : false) : void 0) && ((ref = !settings.has_error) != null ? ref : false)) {
      urge("µ29923-8 close");
      browser.close();
    }
    return urge("µ29923-9 done");
  };

  //###########################################################################################################
  if (module.parent == null) {
    (async() => {
      await demo_2();
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=start-browser.js.map
