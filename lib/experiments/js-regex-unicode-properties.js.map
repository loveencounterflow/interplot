{
  "version": 3,
  "file": "js-regex-unicode-properties.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/js-regex-unicode-properties.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/TEE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# _format                   = require 'number-format.js'\n# format_float              = ( x ) -> _format '#,##0.000', x\n# format_integer            = ( x ) -> _format '#,##0.',    x\n# format_as_percentage      = ( x ) -> _format '#,##0.00',  x * 100\nformat_integer = ( x ) -> \"#{x}\"\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n# debug format_float 123.456789\n# debug format_float 0.456789\n# debug format_float 123456789.456789\n# process.exit 1\n\n#-----------------------------------------------------------------------------------------------------------\nshow_ranges = ( ranges ) ->\n  count = 0\n  for range in ranges\n    count += range[ 1 ] - range[ 0 ] + 1\n  help \"found #{format_integer count} glyphs for #{rpr pattern}\"\n  for range in ranges\n    [ first_cid, last_cid, ]  = range\n    last_cid                 ?= first_cid\n    glyphs                    = []\n    for cid in [ first_cid .. ( Math.min first_cid + 32, last_cid ) ]\n      glyphs.push String.fromCodePoint cid\n    glyphs = glyphs.join ''\n    first_cid_hex = \"0x#{first_cid.toString 16}\"\n    last_cid_hex  = \"0x#{last_cid.toString 16}\"\n    count_txt     = format_integer last_cid - first_cid + 1\n    help \"#{first_cid_hex} .. #{last_cid_hex} #{glyphs} (#{count_txt})\"\n\n#-----------------------------------------------------------------------------------------------------------\ncid_matches_pattern = ( pattern, cid ) ->\n  R = String.fromCodePoint cid\n  return R if pattern.test R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nranges_from_pattern = ( pattern ) ->\n  ### TAINT doesn't work for negated expressions like /^[^\\p{White_Space}]$/u ###\n  R           = []\n  range       = null\n  first_cid   = 0x0000\n  # last_cid    = 0x2ebe0\n  last_cid    = 0x10ffff\n  cid         = first_cid - 1\n  prv_matched = false\n  #.........................................................................................................\n  while cid < last_cid\n    cid += +1\n    #.......................................................................................................\n    if ( cid_matches_pattern pattern, cid )?\n      unless prv_matched\n        range = [ cid, ]\n        R.push range\n      prv_matched = true\n    #.......................................................................................................\n    else\n      if prv_matched\n        range.push cid - 1\n        range = null\n      prv_matched = false\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n# pattern_A   = /^\\p{Script=Latin}$/u\n# pattern_B   = /^\\p{Script_Extensions=Latin}$/u\n### see https://github.com/mathiasbynens/regexpu-core/blob/master/property-escapes.md ###\npatterns    = []\n# # patterns.push /^\\p{Script_Extensions=Cyrillic}$/u\n# # patterns.push /^\\p{Script_Extensions=Greek}$/u\n# patterns.push /^\\p{Unified_Ideograph}$/u\npatterns.push /^\\p{Script=Han}$/u\npatterns.push /^\\p{Cc}$/u # Control\npatterns.push /^\\p{Cf}$/u # Format\npatterns.push /^\\p{Cs}$/u # Surrogate\n# patterns.push /^\\p{Co}$/u # Private Use\npatterns.push /^\\p{Cn}$/u # Unassigned\n# patterns.push /^\\p{Script_Extensions=Han}$/u\n# patterns.push /^\\p{IDS_Binary_Operator}$/u\n# patterns.push /^\\p{IDS_Trinary_Operator}$/u\n# patterns.push /^\\p{Radical}$/u\n# patterns.push /^\\p{White_Space}$/u\n# patterns.push /^\\p{Script_Extensions=Hiragana}$/u\n# patterns.push /^\\p{Script=Hiragana}$/u\n# patterns.push /^\\p{Script_Extensions=Katakana}$/u\n# patterns.push /^\\p{Script=Katakana}$/u\n# patterns.push /^\\p{Script_Extensions=Hangul}$/u\n# patterns.push /^\\p{Ideographic}$/u\n# patterns.push /^\\p{Script_Extensions=Latin}$/u\n# patterns.push /^\\p{Script=Latin}$/u\nfor pattern in patterns\n  show_ranges ranges_from_pattern pattern\n\n# info isa.interplot_text_with_hiragana 'あいうえおか'\n# info isa.interplot_text_with_hiragana 'あいうえおかx'\n# info isa.interplot_text_with_hiragana 'abc'\n# info isa.interplot_text_hiragana      'あいうえおか'\n# info isa.interplot_text_with_ideographic      'あいうえおか'\n# info isa.interplot_text_cjk           'あいうえおか〇〡〢〣〤〥〦〧〨〩〸〹〺㐀㐁㐂一丁丂豈更車並况全𗀀𗀁𗀂𘠄𘠅𘠆𘠇𘠈𘠉𘠊𛅰𛅱𛅲𛅳𠀀𠀁가각갂、。〃《》【】〓〜ｦｧｨｩｱｲｳｴ⿰⿱𝍦𝍧𝍨'\n# info isa.interplot_text_with_cjk      'あいうえおか〇〡〢〣〤〥〦〧〨〩〸〹〺㐀㐁㐂一丁丂豈更車並况全𗀀𗀁𗀂𘠄𘠅𘠆𘠇𘠈𘠉𘠊𛅰𛅱𛅲𛅳𠀀𠀁가각갂、。〃《》【】〓〜ｦｧｨｩｱｲｳｴ⿰⿱𝍦𝍧𝍨'\n# info isa.interplot_text_cjk           'abcあいうえおか〇〡〢〣〤〥〦〧〨〩〸〹〺㐀㐁㐂一丁丂豈更車並况全𗀀𗀁𗀂𘠄𘠅𘠆𘠇𘠈𘠉𘠊𛅰𛅱𛅲𛅳𠀀𠀁가각갂、。〃《》【】〓〜ｦｧｨｩｱｲｳｴ⿰⿱𝍦𝍧𝍨'\n# info isa.interplot_text_with_cjk      'abcあいうえおか〇〡〢〣〤〥〦〧〨〩〸〹〺㐀㐁㐂一丁丂豈更車並况全𗀀𗀁𗀂𘠄𘠅𘠆𘠇𘠈𘠉𘠊𛅰𛅱𛅲𛅳𠀀𠀁가각갂、。〃《》【】〓〜ｦｧｨｩｱｲｳｴ⿰⿱𝍦𝍧𝍨'\n# info ///^#{types._regex_any_of_cjk_property_terms()}+$///\n\n\n\n"
  ]
}