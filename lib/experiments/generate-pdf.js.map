{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/experiments/generate-pdf.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/GENERATE-PDF'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\n### TAINT implement in InterText ###\n# _format                   = require 'number-format.js'\n_format                   = CND.format_number\nformat_float              = ( x ) -> _format '#,##0.000', x\nformat_integer            = ( x ) -> _format '#,##0.',    x\nformat_as_percentage      = ( x ) -> _format '#,##0.00',  x * 100\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  cast\n  type_of }               = types\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\npage_html_path            = PATH.resolve PATH.join __dirname, '../../../public/main.html'\nLINEMAKER                 = require '../linemaker'\nPUPPETEER                 = require 'puppeteer'\n#...........................................................................................................\ncache                     = {}\nsettings                  = require '../settings'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\necho_browser_console = ( c ) =>\n  ### OK ###\n  linenr      = c._location?.lineNumber ? '?'\n  path        = c._location?.url        ? '???'\n  short_path  = path\n  if ( match = path.match /^file:\\/\\/(?<path>.+)$/ )?\n    short_path = PATH.relative process.cwd(), PATH.resolve FS.realpathSync match.groups.path\n  path        = short_path unless short_path.startsWith '../'\n  location    = \"#{path}:#{linenr}\"\n  text        = c._text ? '???'\n  # whisper '^33489^', ( types.all_keys_of c ).sort().join ' ' # [ .. 100 ]\n  # whisper '^33489^', ( types.all_keys_of c.valueOf() ).sort().join ' ' # [ .. 100 ]\n  # whisper '^33489^', typeof c\n  # whisper '^33489^', typeof c.valueOf()\n  # debug c.valueOf().jsonValue\n  #.........................................................................................................\n  if c._type is 'error'\n    settings.has_error = true\n    warn \"#{location}:\", text\n    if ( settings.close?.on_error ? false )\n      after 3, => process.exit 1\n    # throw new Error text\n  #.........................................................................................................\n  else\n    whisper \"#{location}:\", text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_page = ( browser ) ->\n  ### OK ###\n  if isa.empty ( pages = await browser.pages() )\n    urge \"µ29923-2 new page\";           R = await browser.newPage()\n  else\n    urge \"µ29923-2 use existing page\";  R = pages[ 0 ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ntake_screenshot = ( page ) ->\n  urge \"µ29923-6 take screenshot\"\n  #.........................................................................................................\n  if settings.screenshot.puppeteer.fullPage\n    await page.screenshot settings.screenshot.puppeteer\n  #.........................................................................................................\n  else\n    #.......................................................................................................\n    urge \"µ29923-5 page goto\"\n    target_selector = settings.screenshot.target_selector\n    chart_dom = await page.$ target_selector\n    #.......................................................................................................\n    unless chart_dom?\n      warn \"unable to take screenshot: DOM element #{rpr target_selector} not found\"\n      return null\n    #.......................................................................................................\n    urge \"µ29923-6 take screenshot\"\n    await chart_dom.screenshot settings.screenshot.puppeteer\n  #.........................................................................................................\n  help \"output written to #{PATH.relative process.cwd(), settings.screenshot.puppeteer.path}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_devtools_node_from_selector = ( page, doc, selector ) ->\n  ### TAINT how are 'devtools nodes' different from DOM nodes? ###\n  return await page._client.send 'DOM.querySelector', { nodeId: doc.root.nodeId, selector, }\n\n#-----------------------------------------------------------------------------------------------------------\n_raw_font_stats_from_selector = ( page, doc, selector ) ->\n  ### see https://chromedevtools.github.io/devtools-protocol/tot/CSS#method-getPlatformFontsForNode ###\n  node        = await _devtools_node_from_selector page, doc, selector\n  description = await page._client.send 'CSS.getPlatformFontsForNode', { nodeId: node.nodeId, }\n  return description.fonts\n\n#-----------------------------------------------------------------------------------------------------------\nget_ppt_doc_object = ( page ) ->\n  return R if ( R = cache.ppt_doc_object )?\n  await page._client.send 'DOM.enable'\n  await page._client.send 'CSS.enable'\n  R = cache.ppt_doc_object = await page._client.send 'DOM.getDocument'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_style = ( page ) ->\n  ### NOTE observe that due to caching, page base style may not be up-to-date after page styles changed ###\n  return R if ( R = cache.base_style )?\n  return cache.base_style = await page.evaluate ->\n    style_obj = window.getComputedStyle document.querySelector 'unstyledelement'\n    R         = {}\n    # for idx in [ 0 ... style_obj.length ]\n    #   key       = style_obj[ idx ]\n    #   R[ key ]  = style_obj.getPropertyValue key\n    ### NOTE iterate as if object were a list, use API method with key instead of bracket syntax: ###\n    for key in style_obj\n      R[ key ]  = style_obj.getPropertyValue key\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\nselectors_from_display_value = ( page, display_value ) ->\n  return await page.evaluate ->\n    all_nodes   = Array.from document.querySelectorAll 'body *'\n    block_nodes = all_nodes.filter ( d ) -> ( window.getComputedStyle d ).display is 'block'\n    return ( selector_of d for d in block_nodes )\n\n#-----------------------------------------------------------------------------------------------------------\nget_all_selectors = ( page ) ->\n  return await page.evaluate ->\n    all_nodes   = Array.from document.querySelectorAll 'body *'\n    return ( selector_of d for d in all_nodes )\n\n#-----------------------------------------------------------------------------------------------------------\ncomputed_styles_from_selector = ( page, selector ) ->\n  styles          = await styles_from_selector page, 'slug'\n  base_style      = await get_base_style page\n  return { base_style..., styles.verdicts..., }\n\n#-----------------------------------------------------------------------------------------------------------\nstyles_from_selector = ( page, selector ) ->\n  doc             = await get_ppt_doc_object page\n  node            = await _devtools_node_from_selector page, doc, selector\n  # debug '^33334^', jr description = await page._client.send 'DOM.describeNode', { nodeId: node.nodeId, }\n  return styles_from_nodeid page, node.nodeId\n\n#-----------------------------------------------------------------------------------------------------------\nstyles_from_nodeid = ( page, nodeid ) ->\n  sheets          = []\n  locations       = []\n  rulesets        = []\n  R               = { sheets, locations, rulesets, }\n  doc             = await get_ppt_doc_object page\n  description     = await page._client.send 'CSS.getMatchedStylesForNode', { nodeId: nodeid, }\n  #.........................................................................................................\n  for stylesheet in description.matchedCSSRules\n    sheet                 = { styleSheetId: stylesheet.rule.styleSheetId, }\n    rules                 = {}\n    shorthand_entry_names = new Set ( d.name for d in stylesheet.rule.style.shorthandEntries )\n    #.......................................................................................................\n    if ( range = stylesheet.rule.style.range )?\n      # debug '^33378^', range\n      first_linenr  = range.startLine   + 1\n      first_colnr   = range.startColumn + 1\n      last_linenr   = range.endLine     + 1\n      last_colnr    = range.startColumn + 1\n      location      = { first:  { linenr: first_linenr, colnr: first_colnr, }, \\\n                        last:   { linenr: last_linenr,  colnr: last_colnr,  }, }\n    #.......................................................................................................\n    else\n      location      = null\n    #.......................................................................................................\n    sheets.push     sheet\n    rulesets.push   rules\n    locations.push  location\n    #.......................................................................................................\n    for property in stylesheet.rule.style.cssProperties\n      continue if shorthand_entry_names.has property.name\n      rules[ property.name ] = property.value\n  #.........................................................................................................\n  R.verdicts = Object.assign {}, R.rulesets...\n  # for key, value of R.verdicts\n  #   delete R.verdicts[ key ] if value is 'initial'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nmark_elements_with_fallback_glyphs = ( page ) ->\n  ### TAINT could conceivably be faster because we first retrieve block nodes from the DOM, then try to find\n  a selector string for each node, then pass each selector back in to retrieve the respective node again ###\n  R         = []\n  selectors = await get_all_selectors page\n  doc       = await get_ppt_doc_object page\n  #.........................................................................................................\n  echo CND.grey \"—\".repeat 108\n  echo CND.steel \"Missing Glyphs per Element:\"\n  #.........................................................................................................\n  for selector in selectors\n    selector_txt    = CND.gold selector.padEnd 50\n    raw_font_stats  = await _raw_font_stats_from_selector page, doc, selector\n    for font in raw_font_stats\n      continue unless font.familyName in settings.fallback_font_names\n      font_name_txt = CND.lime font.familyName.padEnd 50\n      count_txt     = CND.white ( format_integer font.glyphCount ).padStart 5\n      echo font_name_txt, count_txt, selector_txt\n      R.push selector\n      await page.evaluate ( ( selector ) -> ( $ selector ).addClass 'has-fallback-glyphs' ), selector\n  #.........................................................................................................\n  echo CND.grey \"—\".repeat 108\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nshow_global_font_stats = ( page ) ->\n  doc             = await get_ppt_doc_object page\n  ### thx to https://stackoverflow.com/a/47914111/7568091 ###\n  ### TAINT unfortunately these stats are not quite reliable and appear to hinge on quite particular\n  circumstances, such that font statistics for a given element may or may not include the stats for\n  contained elements. Until a better method has been found, the only reliable way to catch all missing\n  glyphs is to query *all* DOM nodes. FTTB we look into the `<artboard/>` element. ###\n  raw_font_stats  = await _raw_font_stats_from_selector page, doc, 'artboard'\n  R               = []\n  glyph_total     = raw_font_stats.reduce ( ( acc, d ) -> acc + d.glyphCount ), 0\n  raw_font_stats.sort ( a, b ) -> - ( a.glyphCount - b.glyphCount )\n  fallbacks       = []\n  echo CND.grey \"—\".repeat 108\n  echo CND.grey \"^interplot/show_global_font_stats@55432^\"\n  echo CND.steel \"Global Font Statistics:\"\n  for font in raw_font_stats\n    { familyName: font_name, glyphCount: glyph_count, } = font\n    font_name_txt   = CND.lime  ( jr font_name                                    ).padEnd   40\n    glyph_count_txt = CND.white ( format_integer glyph_count                      ).padStart 15\n    percentage_txt  = CND.gold  ( format_as_percentage glyph_count / glyph_total  ).padStart 10\n    echo font_name_txt, glyph_count_txt, percentage_txt\n    d               = { font_name, glyph_count, }\n    fallbacks.push font_name if font_name in settings.fallback_font_names\n    R.push d\n  #.........................................................................................................\n  # unless isa.empty fallbacks\n  unless isa.empty selectors = await mark_elements_with_fallback_glyphs page\n    echo CND.red CND.reverse CND.bold \" Fallback fonts detected: #{fallbacks.join ', '} \"\n    echo CND.red \"in DOM nodes: #{ ( jr d for d in selectors ).join ', '} \"\n  #.........................................................................................................\n  echo CND.grey \"—\".repeat 108\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nprofile = ( page, f ) ->\n  await page.tracing.start { path: '.cache/trace.json', }\n  await f()\n  await page.tracing.stop()\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  url             = 'https://de.wikipedia.org/wiki/Berlin'\n  target_selector = '#content'\n  # url             = 'http://localhost:8080/slugs'\n  # url             = 'http://localhost:8080/slugs', { waitUntil: \"networkidle2\" }\n  # url             = 'http://example.com'\n  # target_selector = 'a'\n  # target_selector = '#page-ready', { timeout: 600e3, }\n  # #.........................................................................................................\n  # url             = 'file:///home/flow/jzr/interplot/public/main.html'\n  # target_selector = '#chart'\n  # # target_selector = '#chart_ready', { timeout: 600e3, }\n  # #.........................................................................................................\n  # url             = 'file:///home/flow/jzr/interplot/public/demo-columns/main.html'\n  # target_selector = '#page-ready'\n  #.........................................................................................................\n  url             = 'file:///home/flow/jzr/interplot/public/demo-galley/main.html'\n  target_selector = '#page-ready'\n  #.........................................................................................................\n  # Set up browser and page.\n  urge \"launching browser\";\n  # browser = await PUPPETEER.launch settings.puppeteer\n  browser_settings            = settings[ settings.use_profile ? 'puppeteer' ]\n  browser                     = await PUPPETEER.launch browser_settings\n  page = await get_page browser\n  #.........................................................................................................\n  page.on 'error', ( error ) => throw error\n  page.on 'console', echo_browser_console\n  #.........................................................................................................\n  # media = 'print'                                       ### OK ###\n  # urge \"emulate media: #{rpr media}\"\n  # debug '^4432^', await page.evaluate -> ( matchMedia 'print' ).matches\n  # await page.emulateMediaType media\n  # debug '^4432^', await page.evaluate -> ( matchMedia 'print' ).matches\n  # await page._client.send 'Emulation.clearDeviceMetricsOverride'\n  # # await page.emulateMedia null\n  # # page.setViewport settings.viewport\n  # # await page.emulate PUPPETEER.devices[ 'iPhone 6' ]\n  # # await page.emulate PUPPETEER.devices[ 'Galaxy Note 3 landscape' ]\n  #.........................................................................................................\n  urge \"goto #{url}\"\n  await page.goto url\n  #.........................................................................................................\n  urge \"waitForSelector\"\n  await page.waitForSelector target_selector\n  #.........................................................................................................\n  urge \"expose slug, pointer functions\"\n  await page.exposeFunction 'TEMPLATES_slug',     ( P... ) => ( require '../template-elements' ).slug     P...\n  await page.exposeFunction 'TEMPLATES_pointer',  ( P... ) => ( require '../template-elements' ).pointer  P...\n  #.........................................................................................................\n  urge \"demo_insert_slabs\"\n  # await profile page, -> await demo_insert_slabs page\n  await demo_insert_slabs page\n  #.........................................................................................................\n  debug '^12221^', jr await computed_styles_from_selector page, 'slug'\n  styles          = await styles_from_selector page, 'slug'\n  base_style      = await get_base_style page\n  computed_style  = { base_style..., styles.verdicts..., }\n  # info '^8887^', jr styles.verdicts\n  urge '^8887^', \"border-left-color:    \", computed_style[ 'border-left-color'    ]\n  urge '^8887^', \"outline-width:        \", computed_style[ 'outline-width'        ]\n  urge '^8887^', \"background-color:     \", computed_style[ 'background-color'     ]\n  urge '^8887^', \"background-repeat-x:  \", computed_style[ 'background-repeat-x'  ]\n  urge '^8887^', \"foo:                  \", computed_style[ 'foo'                  ]\n  urge '^8887^', \"dang:                 \", computed_style[ 'dang'                 ]\n  #.........................................................................................................\n  await show_global_font_stats page\n  #.........................................................................................................\n  if settings.puppeteer.headless\n    urge \"write PDF\"\n    pdf   = await page.pdf settings.pdf\n    path  = '/tmp/test.pdf'\n    ( require 'fs' ).writeFileSync path, pdf\n    info \"ouput written to #{path}\"\n  #.........................................................................................................\n  if ( settings.close?auto ? false ) and ( not settings.has_error ? false )\n    urge \"close\"\n    await browser.close()\n  #.........................................................................................................\n  urge \"done\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use OPS proxy or `require` OPS into this context ###\nOPS_slugs_with_metrics_from_slabs = ( page, P... ) ->\n  return await page.evaluate ( ( P... ) -> OPS.slugs_with_metrics_from_slabs P... ), P...\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_insert_slabs = ( page ) ->\n  text                = \"\"\"III刻文字III每字印\\u3000III\"\"\"\n  text                = \"\"\"自馮瀛王始印五經已後典籍皆為版本其法用膠泥刻字\"\"\"\n  text                = \"\"\"Rectangle自馮瀛王始印五經apostolary已後典籍皆為版本其法用膠泥刻字\"\"\"\n  text                = \"\"\"Yaffir rectangle刻文字apostolary. Letterpress printing.\"\"\"\n  text                = \"\"\"其法用膠泥刻字，薄如錢唇，每字為一印，火燒令堅。先設一鐵版，其上以松脂臘和紙灰之類冒之。\"\"\"\n  text                = \"\"\"䷾Letterpress printing is a technique of relief printing using a printing press, a\n  process by which many copies are produced by repeated direct impression of an inked, raised surface\n  against sheets or a continuous roll of paper. A worker composes and locks movable type into the \"bed\" or\n  \"chase\" of a press, inks it, and presses paper against it to transfer the ink from the type which creates\n  an impression on the paper. ䷾In typesetting by hand compositing, a sort or type is a piece of type\n  representing a particular letter or symbol, cast from a matrix mold and assembled with other sorts bearing\n  additional letters into lines of type to make up a form from which a page is printed.\"\"\"\n  text                = ( text + ' ' ).repeat 1\n  slabs_dtm           = LINEMAKER.slabs_from_text text\n  validate.interplot_slabs_datom slabs_dtm\n  # html    = await page.evaluate ( ( slabs_dtm ) -> OPS.demo_insert_slabs slabs_dtm ), slabs_dtm\n  XXX_settings        = { min_slab_idx: 0, }\n  t0 = Date.now()\n  slugs_with_metrics  = await OPS_slugs_with_metrics_from_slabs page, slabs_dtm, XXX_settings\n  dt = Date.now() - t0\n  # for d in slugs_with_metrics\n  #   info '^53566^', \"slugs_with_metrics\", jr d\n  debug '^22332^', \"dt: #{format_float dt / 1000} s\"\n  return null\n  ### ((畢昇發明活字印刷術))\n\n    宋沈括著《夢溪筆談》卷十八記載\n    ((版印書籍唐人尚未盛為之))\n    自馮瀛王始印五經已後典籍皆為版本\n    ((慶歷中，有布衣畢昇，又為活版。))\n    其法用膠泥刻字，薄如錢唇，每字為一印，火燒令堅。先設一鐵版，其上以松脂臘和紙灰之類冒之。\n    欲印則以一鐵範置鐵板上，乃密布字印。滿鐵範為一板，\n    持就火煬之，藥稍鎔，則以一平板按其面，則字平如砥。\n    ((若止印三、二本，未為簡易；若印數十百千本，則極為神速。))\n    常作二鐵板，一板印刷，一板已自布字。此印者才畢，則第二板已具。\n    更互用之，瞬息可就。每一字皆有數印，如之、也等字，每字有二十餘印，\n    以備一板內有重複者。不用則以紙貼之，每韻為一貼，木格貯之。\n    ((有奇字素無備者，旋刻之，以草火燒，瞬息可成。))\n    不以木為之者，木理有疏密，沾水則高下不平，兼與藥相粘，不可取。\n    不若燔土，用訖再火令藥熔，以手拂之，其印自落，\n    殊不沾汙。昇死，其印為余群從所得，\n    ((至今保藏。))\n  ###\n\n\n  # # page.click '#writehere'\n  # debug '^22762^', \"sending keys\"\n  # text = \"this text courtesy of Puppeteer\"\n  # await page.type '#writehere', text #, { delay: 10, }\n  # # await page.keyboard.down 'Shift'\n  # # for chr in text\n  # #   await page.keyboard.down 'ArrowLeft'\n  # #   await page.keyboard.up 'ArrowLeft'\n  # # await page.keyboard.up 'Shift'\n  # # await sleep 1\n  # # await page.keyboard.down 'Tab'\n  # # await page.keyboard.up 'Tab'\n  # # await page.keyboard.down 'Shift'\n  # # for _ in [ 1 .. 60 ]\n  # #   rectangle = await page.evaluate -> OPS.rectangle_from_selection()\n  # #   info '^34736^', \"selection x:\", rectangle.x - delta\n  # #   await page.keyboard.press 'ArrowRight'\n  #   # await page.keyboard.down 'ArrowRight'\n  #   # await page.keyboard.up 'ArrowRight'\n  #   # info '^34736^', \"selection width:\", jr rectangle.width\n  # # await page.keyboard.press('KeyA');\n  # # await page.keyboard.up('Shift');\n  # # await page.keyboard.press('KeyA');\n  # # await page.focus target_selector # doesn't work??\n  # # after 10, ->\n  #   # debug '^22762^', \"page.select\", page.select 'stick#xe761'\n  #   # page.keyboard.press 'ShiftRight'\n  #   # page.keyboard.press 'ShiftRight'\n  #   # page.keyboard.press 'ShiftRight'\n  # #.........................................................................................................\n  # # info '^33987^', jr await page.evaluate OPS.demo_ranges_and_coordinates()\n  # # info '^33987^', jr await page.evaluate OPS.demo_jquery_test()\n  # # info '^33987^', \"OPS.demo_insert_html_fragment()  \", jr await page.evaluate -> OPS.demo_insert_html_fragment()\n  # # info '^33987^', \"OPS.demo_find_end_of_line()      \", jr await page.evaluate -> OPS.demo_find_end_of_line()\n  # #.........................................................................................................\n  # ### thx to https://github.com/puppeteer/puppeteer/issues/4419 ###\n  # # session = await page.target().createCDPSession()\n  # # await session.send 'Emulation.setPageScaleFactor', { pageScaleFactor: 0.1, }\n  #   # await page.emulate {\n  #   #   name: 'MingKwai Typesetter / InterPlot',\n  #   #   userAgent: 'Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n  #   #   viewport:\n  #   #     width:              40000\n  #   #     height:             50000\n  #   #     deviceScaleFactor:  1\n  #   #     isMobile:           true\n  #   #     hasTouch:           false\n  #   #     isLandscape:        true }\n  #   #.......................................................................................................\n  #   # await take_screenshot page\n  #   #.......................................................................................................\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await sleep 5\n  await demo_2()\n  help 'ok'\n  if settings.puppeteer.headless\n    process.exit 0 ### needed? ###\n\n\n\n"
  ]
}