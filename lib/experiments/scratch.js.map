{
  "version": 3,
  "file": "scratch.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/scratch.coffee"
  ],
  "names": [],
  "mappings": ";AACA;AAAA,IAAA,CAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,aAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAAA,4BAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;AAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;AAC5B,GAAA,GAA4B,GAAG,CAAC;;AAChC,KAAA,GAA4B;;AAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;AAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;AAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;AAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;AAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;AAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;AAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;AAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;AAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;AAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;AAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;AACA,MAAA,GAA4B,MAAM,CAAC;;AACnC,SAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;SAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,GAAA,CAAV,CAAb;AAAZ,EAnB5B;;;AAqBA,KAAA,GAA4B,OAAA,CAAQ,UAAR;;AAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,KAH5B,EAtBA;;;;AA4BA,KAAA,GAA4B,OAAA,CAAQ,OAAR;;AAC5B,CAAA,CAAE,SAAF,EACE,KADF,EAEE,IAFF,EAGE,MAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EA7BA;;;AAkCA,EAAA,GAA4B,OAAA,CAAQ,YAAR,EAlC5B;;;AAoCA,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,MAHF,EAIE,aAJF,EAKE,mBALF,EAME,KANF,CAAA,GAM4B,EAAE,CAAC,MAAH,CAAA,CAN5B,EApCA;;;AA4CA,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;SAAc,UAAA,CAAW,CAAX,EAAc,GAAA,GAAM,IAApB;AAAd;;AAC5B,KAAA,GAA4B,QAAA,CAAE,GAAF,CAAA;SAAW,IAAI,OAAJ,CAAY,QAAA,CAAE,IAAF,CAAA;WAAY,KAAA,CAAM,GAAN,EAAW,IAAX;EAAZ,CAAZ;AAAX,EA7C5B;;;;AAgDA,SAAA,GAA4B,OAAA,CAAQ,WAAR;;AAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,SAA5B,EAjDA;;;AAmDA,EAAA,GAA4B,OAAA,CAAQ,mBAAR;;AAC5B,QAAA,GAA4B,CAAA;;AAC5B,IAAA,GAA4B,CAAA;;AAC5B,SAAA,GAA4B,CAAA;;AAC5B,SAAA,GAA4B,KAAK,CAAC,MAAN,CAAa,OAAA,CAAQ,aAAR,CAAb,EAvD5B;;;;;AA8DA,SAAS,CAAC,OAAV,GAAoB,QAAA,CAAE,IAAF,CAAA;EAClB,QAAQ,CAAC,IAAT,CAAc,IAAd;AACA,SAAO,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;IACP,IAAA,CAAQ,CAAE,GAAG,CAAC,IAAJ,CAAS,CAAT,CAAF,CAAH,GAAuB,CAAA,GAAI,IAA3B,GAAqC,CAA1C;AACA,WAAO;EAFA,CAAF;AAFW,EA9DpB;;;;;AAwEA,QAAQ,CAAC,iBAAT,GAA6B,QAAA,CAAA,CAAA;AAC7B,MAAA,WAAA,EAAA;EAAE,WAAA,GAAc;EACd,OAAA,GAAc;AACd,SAAO,CAAA,CAAE,CAAE,IAAF,EAAQ,IAAR,CAAA,GAAA;IACP,IAAU,WAAV;AAAA,aAAA;;IACA,OAAA;IACA,IAAG,cAAc,CAAC,IAAf,CAAoB,IAApB,CAAH;MACE,WAAA,GAAc;MACd,IAAA,CAAK,SAAA,CAAU,OAAV,EAAmB;QAAA,CAAA,EAAG,CAAE,OAAF;MAAH,CAAnB,CAAL;AACA,aAAO,IAAI,CAAC,GAAL,CAAA,EAHT;;WAIA,IAAA,CAAK,IAAL;EAPO,CAAF;AAHoB,EAxE7B;;;;;AAwFA,IAAI,CAAC,sBAAL,GAA8B,QAAA,CAAA,CAAA;AAC9B,MAAA,OAAA,EAAA;EAAE,OAAA,GAAY;EACZ,QAAA,GAAY;AACZ,SAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;IACP,IAAqB,OAAA,IAAW,CAAhC;AAAA,aAAO,IAAI,CAAC,GAAL,CAAA,EAAP;;AACA,YAAO,CAAC,CAAC,IAAT;AAAA,WACO,IADP;QAEI,QAAA,GAAW;QACX,IAAA,CAAK,CAAL;AAFG;AADP,WAIO,IAJP;QAKI,QAAA,GAAW;QACX,OAAA;QACA,IAAA,CAAK,CAAL;AAHG;AAJP;QASI,IAAiB,QAAjB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;AATJ;AAUA,WAAO;EAZA,CAAF;AAHqB,EAxF9B;;;AA0GA,IAAI,CAAC,YAAL,GAAoB,QAAA,CAAA,CAAA;AAClB,SAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;IACP,KAAc,MAAA,CAAO,CAAP,EAAU,OAAV,CAAd;AAAA,aAAA;;WACA,IAAA,CAAK,CAAC,CAAC,IAAP;EAFO,CAAF;AADW,EA1GpB;;;;;;;;;;;;;AA0HA,IAAI,CAAC,SAAL,GAAiB,QAAA,CAAA,CAAA;AACjB,MAAA,SAAA,EAAA;EAAE,IAAA,GAAY,MAAA,CAAO,MAAP;EACZ,SAAA,GAAY;AACZ,SAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACtB,QAAA;IAAI,IAAG,CAAA,KAAK,IAAR;MACE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAe,EAAf;AACP,aAAO,IAAA,CAAK,SAAA,CAAU,aAAV,EAAyB,CAAE,IAAF,CAAzB,CAAL,EAFT;;IAGA,QAAQ,CAAC,IAAT,CAAc,CAAd;WACA,SAAS,CAAC,IAAV,CAAe,CAAf;EALkB,CAAb;AAHQ,EA1HjB;;;AAqIA,IAAI,CAAC,UAAL,GAAkB,QAAA,CAAA,CAAA;AAChB,SAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;IACP,KAAqB,MAAA,CAAO,CAAP,EAAU,aAAV,CAArB;AAAA,aAAO,IAAA,CAAK,CAAL,EAAP;;WACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,CAAE,CAAF,CAAA,GAAA;aAAS,CAAC,CAAC,IAAF,GAAS,SAAS,CAAC,IAAI,CAAC,SAAf,CAAyB,CAAC,CAAC,IAA3B;IAAlB,CAAR,CAAL;EAFO,CAAF;AADS,EArIlB;;;AA2IA,IAAI,CAAC,SAAL,GAAiB,QAAA,CAAA,CAAA;AACf,SAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;IACP,KAAqB,MAAA,CAAO,CAAP,EAAU,aAAV,CAArB;AAAA,aAAO,IAAA,CAAK,CAAL,EAAP;;IACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;WACA,IAAA,CAAK,SAAA,CAAU,QAAV,EAAoB,SAAS,CAAC,KAAK,CAAC,eAAhB,CAAgC,CAAC,CAAC,IAAlC,CAApB,CAAL;EAHO,CAAF;AADQ,EA3IjB;;;;;;;AAsJA,4BAAA,GAA+B,QAAA,CAAA,CAAA;AAE/B,MAAA,QAAA;;EACE,QAAA,GAAW,QAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,EAAA;;;;;;;;;;;IAWT,IAAA,CAAK,CAAL;WACA,IAAA,CAAA;EAZS,EADb;;EAgBE,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,CAAF,CAAA,EAAA;;AACb,QAAA,GAAA,EAAA,GAAA,EAAA;IACI,GAAA,GAAoB;IACpB,iBAAA,GAAoB;IACpB,GAAA,GAAoB;IACpB,GAAA,GAAoB,KAJxB;;AAMI,WAAO,mBAAA,CAAoB,KAAA,CAAE,IAAF,EAAQ,IAAR,CAAA,GAAA;MACzB,IAAA,CAAK,SAAA,CAAU,2BAAV,CAAL;MACA,IAAA,CAAK,sBAAL;MACA,CAAC,CAAC,EAAF,GAAO,CAAA,MAAM,EAAE,CAAC,kBAAH,CAAsB,CAAE,GAAF,EAAO,iBAAP,EAA0B,GAA1B,CAAtB,CAAN;MACP,IAAA,CAAK,kBAAL,EAHN;;;MAMM,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAV,CAAyB,gBAAzB,EAA+C,CAAA,GAAE,CAAF,CAAA,GAAA;eAAY,CAAE,OAAA,CAAQ,cAAR,CAAF,CAA0B,CAAC,IAA3B,CAAoC,GAAA,CAApC;MAAZ,CAA/C;MACN,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAV,CAAyB,mBAAzB,EAA+C,CAAA,GAAE,CAAF,CAAA,GAAA;eAAY,CAAE,OAAA,CAAQ,cAAR,CAAF,CAA0B,CAAC,OAA3B,CAAoC,GAAA,CAApC;MAAZ,CAA/C,EAPZ;;MASM,IAAA,CAAK,SAAA,CAAU,0BAAV,CAAL;AACA,aAAO,IAAA,CAAA;IAXkB,CAApB;EAPE,EAhBb;;EAqCE,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,CAAF,CAAA;AAC5B,WAAO,MAAA,CAAO,KAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,GAAA;AAClB,UAAA,IAAA,EAAA;MAAM,KAAyC,MAAA,CAAO,CAAP,EAAU,0BAAV,CAAzC;AAAA,eAAS,QAAA,CAAS,CAAT,EAAY,IAAZ,EAAkB,IAAlB,EAAT;;MACA,IAAA,CAAK,CAAL;MACA,QAAA,GAAW,SAFjB;;;MAKM,IAAA,GAAO,QAAA,CAAE,QAAF,CAAA;AACb,YAAA;QAAQ,CAAE,CAAA,CAAE,QAAF,CAAF,CAAc,CAAC,KAAf,CAAqB,QAAA,CAAA,CAAA;iBACnB,UAAU,CAAC,mBAAX,GAAiC,CAAA,CAAE,QAAF;QADd,CAArB;AAEA,mEAAqC,CAAE;MAHlC;MAIP,KAAA,CAAM,SAAN,EAAiB,CAAA,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAV,CAAmB,IAAnB,EAAyB,QAAzB,CAAN,CAAjB;MACA,IAAA,CAAK,SAAA,CAAU,iCAAV,EAA6C,CAAE,QAAF,CAA7C,CAAL;AACA,aAAO,IAAA,CAAA;IAZK,CAAP;EADqB,EArChC;;SAqDE,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;AAClB,QAAA,QAAA;;;;;;;;;;;;;;;;;IAgBI,QAAQ,CAAC,aAAT,CAAwB,CAAC,CAAC,WAA1B,EAhBJ;;IAkBI,QAAA,GAAY;IACZ,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,OAAD,CAA8B,CAA9B,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,0BAAD,CAA8B,CAA9B,CAAd,EApBJ;;AAsBI,WAAO,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;EAvBO;AAvDa;;AAgF/B,4BAA4B,CAAC,KAA7B,CAAmC,SAAnC,EAtOA;;;;;AA2OA,IAAC,CAAA,CAAD,GAAK,QAAA,CAAA,CAAA;SAAG,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,CAAA,GAAA;AACpB,QAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA;;IACE,OAAO,CAAC,EAAR,CAAW,QAAX,EAAqB,MAAA,QAAA,CAAA,CAAA,EAAA;;;MAGnB,IAAA,CAAK,yBAAL;MACA,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAV,CAAgB;QAAE,eAAA,EAAiB;MAAnB,CAAhB;MACN,MAAM,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAb,CAAA;aACN,OAAO,CAAC,IAAR,CAAA;IANmB,CAArB,EADF;;IASE,CAAA,GACE;MAAA,QAAA,EAAc,IAAA,CAAK,SAAL,EAAgB,QAAA,CAAE,CAAF,CAAA;eAAS,MAAA,CAAO,CAAP,EAAU;UAAA,QAAA,EAAU;QAAV,CAAV;MAAT,CAAhB;IAAd,EAVJ;;IAYE,CAAC,CAAC,WAAF,GAAgB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,mBAArB,CAAb;IAChB,CAAC,CAAC,WAAF,GAAgB,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,WAAZ,EAAyB,kBAAzB;IAChB,CAAC,CAAC,WAAF,GAAgB,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,WAAZ,EAAyB,iBAAzB;IAChB,QAAA,GAAgB,GAflB;;IAiBE,MAAA,GAAgB,CAAA,MAAM,EAAE,CAAC,uBAAH,CAA2B,CAAC,CAAC,WAA7B,CAAN;IAChB,UAAA,GAAgB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAI,GAAG,CAAC,IAAJ,CAAS,CAAT;IAAb,EAlBlB;;IAoBE,QAAQ,CAAC,IAAT,CAAc,MAAd,EApBF;;;AAoBiE,iDAG/D,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd;AAA6E,mCAC7E,QAAQ,CAAC,IAAT,CAAc,QAAQ,CAAC,iBAAT,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAd,EAzBF;;IA2BE,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE;MAAE,QAAA,EAAU;IAAZ,CAAF,EAA6B,IAAI,CAAC,eAAL,CAAA,CAA7B,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,sBAAL,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,YAAL,CAAA,CAAd,EA7BF;;IA+BE,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,SAAL,CAAA,CAAd;AAAuE,yCACvE,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,UAAL,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,SAAL,CAAA,CAAd,EAjCF;;AAiCuF,2BAErF,QAAQ,CAAC,IAAT,CAAc,SAAS,CAAC,YAAV,CAAuB,CAAvB,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,KAAA,CAAA,CAAd,EApCF;;IAsCE,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,CAAA,CAAA,GAAA;aACnB,OAAA,CAAA;IADmB,CAAP,CAAd;IAEA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,WAAO;EA1CW,CAAZ;AAAH,EA3OL;;;AAyRA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;EAAkC,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;IAEhC,MAAM,IAAC,CAAA,CAAD,CAAA,EADR;;;;;;WAOE,IAAA,CAAK,IAAL;EARgC,CAAA,IAAlC",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/SCRATCH'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  cast\n  type_of }               = types\n#...........................................................................................................\n# DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\nDATOM                     = require 'datom'\n{ new_datom\n  stamp\n  lets\n  select }                = DATOM.export()\n#...........................................................................................................\nSP                        = require 'steampipes'\n# SP                        = require '../../apps/steampipes'\n{ $\n  $async\n  $drain\n  $watch\n  $before_first\n  $async_before_first\n  $show  }                = SP.export()\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n# page_html_path            = PATH.resolve PATH.join __dirname, '../../../public/main.html'\n# PUPPETEER                 = require 'puppeteer'\nINTERTEXT                 = require 'intertext'\n{ HTML, }                 = INTERTEXT\n#...........................................................................................................\nRC                        = require '../remote-control'\nDATAMILL                  = {}\nDEMO                      = {}\nINTERPLOT                 = {}\n_settings                 = DATOM.freeze require '../settings'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nINTERTEXT.$append = ( text ) ->\n  validate.text text\n  return $ ( x, send ) ->\n    send if ( isa.text x ) then x + text else x\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nDATAMILL.$stop_on_stop_tag = ->\n  has_stopped = false\n  line_nr     = 0\n  return $ ( line, send ) =>\n    return if has_stopped\n    line_nr++\n    if /^\\s*<stop\\/>/.test line\n      has_stopped = true\n      send new_datom '^stop', $: { line_nr, }\n      return send.end()\n    send line\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nDEMO.$grab_first_paragraphs = ->\n  p_count   = 0\n  within_p  = false\n  return $ ( d, send ) =>\n    return send.end() if p_count >= 2\n    switch d.$key\n      when '<p'\n        within_p = true\n        send d\n      when '>p'\n        within_p = false\n        p_count++\n        send d\n      else\n        return send d if within_p\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nDEMO.$filter_text = ->\n  return $ ( d, send ) =>\n    return unless select d, '^text'\n    send d.text\n\n# #-----------------------------------------------------------------------------------------------------------\n# DEMO.$consolidate_text = ->\n#   ### TAINT use SP.$collect() ?? ###\n#   last      = Symbol 'last'\n#   collector = []\n#   return $ { last, }, ( d, send ) =>\n#     return send collector.join '' if d is last\n#     validate.text d\n#     collector.push d\n\n#-----------------------------------------------------------------------------------------------------------\nDEMO.$blockify = ->\n  last      = Symbol 'last'\n  collector = []\n  return $ { last, }, ( d, send ) =>\n    if d is last\n      text = collector.join ''\n      return send new_datom '^mkts:block', { text, }\n    validate.text d\n    collector.push d\n\n#-----------------------------------------------------------------------------------------------------------\nDEMO.$hyphenate = ->\n  return $ ( d, send ) =>\n    return send d unless select d, '^mkts:block'\n    send lets d, ( d ) => d.text = INTERTEXT.HYPH.hyphenate d.text\n\n#-----------------------------------------------------------------------------------------------------------\nDEMO.$as_slabs = ->\n  return $ ( d, send ) =>\n    return send d unless select d, '^mkts:block'\n    send stamp d\n    send new_datom '^slabs', INTERTEXT.SLABS.slabs_from_text d.text\n    # send lets d, ( d ) => d.text = INTERTEXT.hyphenate d.text\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nprovide_interplot_extensions = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  leapfrog = ( d, send, done ) ->\n    ### NOTE Helper function to slightly simplify quick exit from (async) transforms; used to make up for\n    the still missing `{ leapfrog, }` modifier for `$async` transforms. Does very little but helps to mark\n    those points where the modifier would have been used. Usage:\n\n    ```coffee\n    $t = -> $async ( d, send, done ) =>\n      return ( leapfrog d, send, done ) unless select d, '^key-i'm-waiting-for\n      ...\n    ```\n    ###\n    send d\n    done()\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$launch = ( S ) ->\n    ### TAINT settings to be passed in via `S`? ###\n    url               = 'file:///home/flow/jzr/interplot/public/demo-galley/main.html'\n    wait_for_selector = '#page-ready'\n    gui               = false\n    gui               = true\n    #.........................................................................................................\n    return $async_before_first ( send, done ) =>\n      send new_datom '^interplot:launch-browser'\n      urge \"launching browser...\"\n      S.rc = await RC.new_remote_control { url, wait_for_selector, gui, }\n      urge \"browser launched\"\n      #.....................................................................................................\n      ### TAINT how to best expose libraries in browser context? ###\n      await S.rc.page.exposeFunction 'TEMPLATES_slug',     ( P... ) => ( require '../templates' ).slug     P...\n      await S.rc.page.exposeFunction 'TEMPLATES_pointer',  ( P... ) => ( require '../templates' ).pointer  P...\n      #.....................................................................................................\n      send new_datom '^interplot:browser-ready'\n      return done()\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$find_first_target_element = ( S ) ->\n    return $async ( d, send, done ) =>\n      return ( leapfrog d, send, done ) unless select d, '^interplot:browser-ready'\n      send d\n      selector = 'column' # 'column:nth(0)'\n      # debug '^22298^', await S.rc.page.$ selector\n      # debug '^22298^', await S.rc.page.$ 'column'\n      opsf = ( selector ) ->\n        ( $ document ).ready ->\n          globalThis.xxx_target_elements = $ selector\n        return globalThis.xxx_target_elements?.length\n      debug '^22298^', await S.rc.page.evaluate opsf, selector\n      send new_datom '^interplot:first-target-element', { selector, }\n      return done()\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$text_as_pdf = ( S ) ->\n    ###\n    * [x] launch browser\n    * [ ] establish flow order of target elements (columns) in document\n    * [ ] insert `pointer#pointer` DOM element into page\n    * [ ] ignore events other than `^slabs` FTTB\n    * [ ] determine leftmost, rightmost indexes into slugs that is close to one line worth of text\n    * [ ] call OPS method with assembled text to determine metrics of text at insertion point\n    * [ ] depending on metrics, accept line, try new one, or accept previous attempt\n    * [ ] call OPS method to accept good line and remove other\n    * [ ] check metrics whether vertical column limit has been reached; if so, reposition pointer\n\n    NOTE procedure as detailed here may suffer from performance issue due to repeated IPC; might be better\n    to preproduce and send more line data to reduce IPC calls. Check for ways that\n    `INTERTEXT.SLABS.assemble()` can be made available to OPS.\n\n    ###\n    validate.nonempty_text  S.target_path\n    #..........................................................................................................\n    pipeline  = []\n    pipeline.push @$launch                      S\n    pipeline.push @$find_first_target_element   S\n    #..........................................................................................................\n    return SP.pull pipeline...\n\nprovide_interplot_extensions.apply INTERPLOT\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@f = -> new Promise ( resolve ) =>\n  #.........................................................................................................\n  process.on 'SIGINT', ->\n    ### Make sure browser is closed gracefully so as to continue in previous state and avoid \"do you want to\n    restore\" dialog. This solution works sometimes but not always. ###\n    warn \"Caught interrupt signal\"\n    await S.rc.page.close { runBeforeUnload: true, }\n    await S.rc.browser.close()\n    process.exit()\n  #.........................................................................................................\n  S =\n    settings:     lets _settings, ( d ) -> assign d, headless: false\n  #.........................................................................................................\n  S.sample_home = PATH.resolve PATH.join __dirname, '../../sample-data'\n  S.source_path = PATH.join S.sample_home, 'sample-text.html'\n  S.target_path = PATH.join S.sample_home, 'sample-text.pdf'\n  pipeline      = []\n  # source        = SP.read_from_file S.source_path\n  source        = await SP._KLUDGE_file_as_buffers S.source_path\n  not_a_text    = ( d ) -> not isa.text d\n  #.........................................................................................................\n  pipeline.push source                                           ### ↓↓↓ arbitrarily chunked buffers ↓↓↓ ###\n  #.........................................................................................................\n  ### TAINT implement `$split()` w/ newline/whitespace-preserving ###\n  pipeline.push SP.$split()                                                    ### ↓↓↓ lines of text ↓↓↓ ###\n  pipeline.push DATAMILL.$stop_on_stop_tag()\n  pipeline.push INTERTEXT.$append '\\n'\n  #.........................................................................................................\n  pipeline.push $ { leapfrog: not_a_text, }, HTML.$html_as_datoms()\n  pipeline.push DEMO.$grab_first_paragraphs()\n  pipeline.push DEMO.$filter_text()\n  # pipeline.push DEMO.$consolidate_text()\n  pipeline.push DEMO.$blockify()                                         ### ↓↓↓ text/HTML of blocks ↓↓↓ ###\n  pipeline.push DEMO.$hyphenate()\n  pipeline.push DEMO.$as_slabs()                                                       ### ↓↓↓ slabs ↓↓↓ ###\n  #.........................................................................................................\n  pipeline.push INTERPLOT.$text_as_pdf S\n  pipeline.push $show()\n  #.........................................................................................................\n  pipeline.push $drain =>\n    resolve()\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  #.........................................................................................................\n  await @f()\n  # settings =\n  #   product:          'firefox'\n  #   headless:         false\n  #   executablePath:   '/usr/bin/firefox'\n  # await ( require 'puppeteer' ).launch settings\n  help 'ok'\n\n\n\n\n"
  ]
}