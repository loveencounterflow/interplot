// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  /* NOTE consider to use https://github.com/TehShrike/deepmerge */
  var CND, FS, PATH, PUPPETEER, alert, assign, badge, cast, debug, echo, help, info, isa, jr, merge, rpr, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERPLOT/REMOTE-CONTROL';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  ({jr} = CND);

  assign = Object.assign;

  // join_path                 = ( P... ) -> PATH.resolve PATH.join P...
  //...........................................................................................................
  types = require('./types');

  ({isa, validate, cast, type_of} = types);

  // #...........................................................................................................
  // # DATOM                     = new ( require 'datom' ).Datom { dirty: false, }
  // DATOM                     = require 'datom'
  // { new_datom
  //   stamp
  //   lets
  //   select }                = DATOM.export()
  // #...........................................................................................................
  // SP                        = require 'steampipes'
  // # SP                        = require '../../apps/steampipes'
  // { $
  //   $async
  //   $drain
  //   $watch
  //   $show  }                = SP.export()
  // #...........................................................................................................
  // after                     = ( dts, f ) -> setTimeout f, dts * 1000
  // sleep                     = ( dts ) -> new Promise ( done ) -> after dts, done
  // # page_html_path            = PATH.resolve PATH.join __dirname, '../../../public/main.html'
  // LINEMAKER                 = require '../linemaker'
  // # PUPPETEER                 = require 'puppeteer'
  // INTERTEXT                 = require 'intertext'
  // { HTML, }                 = INTERTEXT
  // #...........................................................................................................
  // DATAMILL                  = {}
  // DEMO                      = {}
  // INTERPLOT                 = {}
  // _settings                 = DATOM.freeze require '../settings'
  PUPPETEER = require('puppeteer');

  merge = require('lodash.merge');

  //-----------------------------------------------------------------------------------------------------------
  this._echo_browser_console = (c) => {
    var linenr, location, match, path, ref, ref1, ref2, ref3, ref4, ref5, ref6, short_path, text;
    linenr = (ref = (ref1 = c._location) != null ? ref1.lineNumber : void 0) != null ? ref : '?';
    path = (ref2 = (ref3 = c._location) != null ? ref3.url : void 0) != null ? ref2 : '???';
    short_path = path;
    if ((match = path.match(/^file:\/\/(?<path>.+)$/)) != null) {
      short_path = PATH.relative(process.cwd(), PATH.resolve(FS.realpathSync(match.groups.path)));
    }
    if (!short_path.startsWith('../')) {
      path = short_path;
    }
    location = `${path}:${linenr}`;
    text = (ref4 = c._text) != null ? ref4 : '???';
    //.........................................................................................................
    if (c._type === 'error') {
      settings.has_error = true;
      warn(`${location}:`, text);
      if ((ref5 = (ref6 = settings.close) != null ? ref6.on_error : void 0) != null ? ref5 : false) {
        after(3, () => {
          return process.exit(1);
        });
      }
    } else {
      // throw new Error text
      //.........................................................................................................
      whisper(`${location}:`, text);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.fetch_old_or_new_page = async function(me) {
    var pages;
    if (isa.empty((pages = (await me.browser.pages())))) {
      return (await me.browser.newPage());
    }
    return pages[0];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_remote_control = async function(settings) {
    var R, page_loaded, ref;
    R = {};
    settings = merge({}, require('./settings'), settings);
    settings.puppeteer.headless = (ref = !settings.gui) != null ? ref : true;
    R.browser = (await PUPPETEER.launch(settings.puppeteer));
    R.page = (await this.fetch_old_or_new_page(R));
    page_loaded = new Promise((resolve) => {
      return R.page.once('load', () => {
        return resolve();
      });
    });
    if (settings.url != null) {
      await R.page.goto(settings.url);
    }
    await page_loaded;
    if (settings.wait_for_selector != null) {
      await R.page.waitForSelector(settings.wait_for_selector);
    }
    //.........................................................................................................
    R.page.on('error', (error) => {
      throw error;
    });
    R.page.on('console', this._echo_browser_console);
    //.........................................................................................................
    return R;
  };

  /*
@resize_window = ( width, height ) ->
 * thx to https://gist.github.com/garywu/bcb9259da58c1e70044355b77c9e1078
 * see https://github.com/Codeception/CodeceptJS/issues/973
    await this.page.setViewport({height, width});
    // Window frame - probably OS and WM dependent.
    height += 85;
    // Any tab.
    const {targetInfos: [{targetId}]} = await this.browser._connection.send(
      'Target.getTargets'
    );
    // Tab window.
    const {windowId} = await this.browser._connection.send(
      'Browser.getWindowForTarget',
      {targetId}
    );
    // Resize.
    await this.browser._connection.send('Browser.setWindowBounds', {
      bounds: {height, width},
      windowId
 */

}).call(this);

//# sourceMappingURL=remote-control.js.map
