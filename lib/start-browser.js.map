{
  "version": 3,
  "file": "start-browser.js",
  "sourceRoot": "..",
  "sources": [
    "src/start-browser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nrequire                   './exception-handler'\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/DEMO-PUPPETEER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\nisa                       = require 'intertype'\nPD                        = require 'pipedreams'\n{ $\n  async }                 = PD\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\npage_html_path            = PATH.resolve PATH.join __dirname, '../../public/main.html'\nPUPPETEER                 = require 'puppeteer'\n\n#-----------------------------------------------------------------------------------------------------------\nsettings =\n  has_error:    false\n  close:\n    on_finish:  true\n    on_error:   false\n  puppeteer:\n    headless:           false\n    deviceScaleFactor:  2\n    args: [\n      '--disable-infobars' # hide 'Chrome is being controlled by ...'\n      '--no-first-run'\n      # '--incognito'\n      # process.env.NODE_ENV === \"production\" ? \"--kiosk\" : null\n      '--allow-file-access-from-files'\n      '--no-sandbox'\n      '--disable-setuid-sandbox'\n      ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# getImageContent = ( page, url ) =>\n#   frameId = String page.mainFrame()._id\n#   debug 'µ37744', 'frameId', rpr frameId\n#   debug 'µ37744', 'url', rpr url\n#   { content, base64Encoded } = await page._client.send 'Page.getResourceContent', { frameId, url }\n#   unless base64Encoded\n#     throw new Error \"µ34774\", 'expected base64Encoded'\n#   return content\n\n#-----------------------------------------------------------------------------------------------------------\necho_browser_console = ( c ) =>\n  whisper c\n  if c._type is 'error'\n    settings.has_error = true\n    warn 'µ37763', 'console:', c._text\n    if ( settings.close?.on_error ? false )\n      after 3, => process.exit 1\n    # throw new Error c._text\n  #.........................................................................................................\n  else\n    info 'µ37763', 'console:', c._text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_page = ( browser ) ->\n  if isa.empty ( pages = await browser.pages() )\n    urge \"µ29923-2 new page\";           R = await browser.newPage()\n  else\n    urge \"µ29923-2 use existing page\";  R = pages[ 0 ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  # Set up browser and page.\n  urge \"µ29923-1 launching browser\";  browser = await PUPPETEER.launch settings.puppeteer\n  page = await get_page browser\n  page.setViewport { width: 1280, height: 926, }\n  page.on 'error', ( error ) => throw error\n  page.on 'console', echo_browser_console\n  urge \"µ29923-3 page goto\";          await page.goto 'file:///home/flow/io/interplot/public/main.html'\n  # urge \"µ29923-4 page goto\";          await page.waitForSelector '#my_dataviz'\n  # urge \"µ29923-5 page goto\";          svg_image = await page.$ '#my_dataviz'\n  # urge \"µ29923-6 take screenshot\";    await svg_image.screenshot { path: 'logo-screenshot.png', omitBackground: false, }\n  # # #.........................................................................................................\n  # # try\n  # #   urge \"µ29923-7 get SVG\"\n  # #   url           = await page.evaluate => ( document.querySelector '#my_dataviz' ).src\n  # #   content       = await getImageContent page, url\n  # #   contentBuffer = Buffer.from content, 'base64'\n  # #   fs.writeFileSync 'logo-extracted.svg', contentBuffer, 'base64'\n  # # catch error\n  # #   warn error\n  # #.........................................................................................................\n  ### TAINT how to make sure drawing chart has finished? ###\n  svg_txt   = await page.evaluate => ( jQuery '#chart svg' )[ 0 ].outerHTML\n  svg_path  = join_path __dirname, '../.cache/chart.svg'\n  FS.writeFileSync svg_path, svg_txt\n  help \"output written to #{PATH.relative process.cwd(), svg_path}\"\n  # #.........................................................................................................\n  if ( settings.close?auto ? false ) and ( not settings.has_error ? false )\n    urge \"µ29923-8 close\"; browser.close()\n  urge \"µ29923-9 done\"\n\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    await demo_2()\n    help 'ok'\n\n\n\n"
  ]
}