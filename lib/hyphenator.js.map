{
  "version": 3,
  "file": "hyphenator.js",
  "sourceRoot": "..",
  "sources": [
    "src/hyphenator.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B,uBAN5B;;;;;;;;EAaA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EAb5B;;;;;;;;EAoBA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,KAH5B,EArBA;;;;EA4BA,IAAC,CAAA,eAAD,GAAwB;;EACxB,IAAC,CAAA,mBAAD,GAAwB;;EACxB,IAAC,CAAA,kBAAD,GAAwB,QAAA,CAAE,IAAF,CAAA;WAA+B,CAAE,IAAI,CAAC,KAAL,CAAW,IAAC,CAAA,eAAZ,CAAF,CAA+B,CAAC,MAAhC,GAAyC;EAAxE;;EACxB,IAAC,CAAA,cAAD,GAAwB,QAAA,CAAE,IAAF,EAAQ,cAAc,GAAtB,CAAA;WAA+B,IAAI,CAAC,OAAL,CAAa,IAAC,CAAA,mBAAd,EAAmC,WAAnC;EAA/B;;EACxB,IAAC,CAAA,gBAAD,GAAwB,QAAA,CAAE,IAAF,EAAQ,cAAc,GAAtB,CAAA;WAA+B,IAAA,CAAK,IAAC,CAAA,cAAD,CAAgB,IAAhB,EAAsB,WAAtB,CAAL;EAA/B,EAhCxB;;;EAoCA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAA,CAAA,EAAA;;;;;AAClB,QAAA,GAAA,EAAA,YAkBwB,4CAlBxB,EAAA;IACE,GAAA,GAAoB,OAAA,CAAQ,gCAAR;IAEpB,QAAA,GAOE,CAAA;;;;;;;MAAA,IAAA,EAAkB,IAAlB;MACA,OAAA,EAAkB,CAAE,OAAF,CADlB;MAEA,aAAA,EAAkB,CAAE,mBAFpB;MAGA,QAAA,EAAkB,MAAQ,iEAH1B;MAIA,SAAA,EAAkB,KAAM,kEAJxB;MAKA,SAAA,EAAkB,IALlB;MAMA,aAAA,EAAkB,CANlB;MAOA,OAAA,EAAkB,CAAE,4CAPpB;MAQA,QAAA,EAAkB;IARlB;IAWF,YAAA,GAAe,GAAG,CAAC,MAAJ,CAAW,QAAX;IACf,QAAQ,CAAC,QAAT,CAAkB,YAAlB;AACA,WAAO;EAxBS;;EApClB;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/HYPHENATOR'\n# debug                     = CND.get_logger 'debug',     badge\n# alert                     = CND.get_logger 'alert',     badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# warn                      = CND.get_logger 'warn',      badge\n# help                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# { jr, }                   = CND\n# assign                    = Object.assign\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/881111/7568091, https://jsperf.com/performance-of-match-vs-split ###\n@soft_hyphen_chr      = '\\u00ad'\n@soft_hyphen_pattern  = /\\u00ad/g\n@count_soft_hyphens   = ( text )                    -> ( text.split @soft_hyphen_chr ).length - 1\n@reveal_hyphens       = ( text, replacement = '-' ) -> text.replace @soft_hyphen_pattern, replacement\n@show_hyphenation     = ( text, replacement = '-' ) -> info @reveal_hyphens text, replacement\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_hyphenator = ->\n  ### https://github.com/mnater/Hyphenopoly ###\n  H9Y               = require 'hyphenopoly/hyphenopoly.module'\n  ### see https://github.com/mnater/Hyphenopoly > docs > Setup.md ###\n  settings          =\n    # hyphen:     '\\u00ad'\n    #         \"exceptions\": {\n    #             \"de\": \"Algo-rithmus\",\n    #             \"global\": \"Silben-trennung\"\n    #         \"exceptions\": {\"de\": \"Algo-rithmus, Algo-rithmus\"},\n    # exceptions: {\"global\": \"Silben-trennung\"},\n    sync:             true\n    require:          [ 'en-us', ] # [ \"de\", \"en-us\"],\n    orphanControl:    1 ### allow orphans ###\n    compound:         'auto'  ### all, auto, hyphen; `all` inserts ZWSP after existing hyphen ###\n    normalize:        false ### if true, transforms text to some kind of Unicode normal form ###\n    mixedCase:        true\n    minWordLength:    4\n    leftmin:          2 ### also available as per-language setting ###\n    rightmin:         2 ### also available as per-language setting ###\n  ### return value of call to `config()` is hyphenation function when `require` contain one element, a map\n  from language codes to functions otherwise; this we fix here: ###\n  _hyphenators = H9Y.config settings\n  validate.function _hyphenators\n  return _hyphenators\n  # switch ( type = type_of _hyphenators )\n  #   when 'function' then hyphenators = new Map(); hyphenators.set 'en-us', _hyphenators\n  #   when 'map'      then null\n  #   else throw new Error \"^3464^ unknown hyphenators type #{rpr type}\"\n  # return hyphenators.get 'en-us'\n\n\n###\n\ncollection of words that are not satisfactorily hyphenated\nto be added to an exceptions dictionary\n\nprocess\nsu-per-cal-ifrag-ilis-tic\n\n\n\n\n###"
  ]
}