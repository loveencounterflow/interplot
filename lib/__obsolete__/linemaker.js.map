{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/__obsolete__/linemaker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/LINEMAKER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nSP                        = require 'steampipes'\n{ $\n  $drain }                = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  select }                = DATOM.export()\nHYPHENATOR                = require './hyphenator'\nhyphenate                 = HYPHENATOR.new_hyphenator()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_hyphenation = ->\n  texts = [\n    \"typesetting\"\n    \"supercalifragilistic\"\n    \"phototypesetter\"\n    \"hairstylist\"\n    \"gargantuan\"\n    \"the lopsided honeybadger\"\n    ]\n  for text in texts\n    htext = hyphenate text\n    htext = htext.replace /\\u00ad/g, '-'\n    info htext\n  return null\n\n\n###\n\n'Slab': the part of a word that is separated from others by breakpoints\n\n> The addressable unit of memory on the NCR 315 series is a \"slab\", short for \"syllable\", consisting of 12\n> data bits and a parity bit. Its size falls between a byte and a typical word (hence the name, 'syllable').\n> A slab may contain three digits (with at sign, comma, space, ampersand, point, and minus treated as\n> digits) or two alphabetic characters of six bits each.—[Wikipedia, \"NCR\n> 315\"](https://en.wikipedia.org/wiki/NCR_315)\n\n###\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nreconstitute_text = ( slab ) ->\n  R = slab.txt\n  if slab.rhs is 'shy' then R += '-'\n  else if slab.rhs is 'spc' then R += ' '\n  return R\n@slabs_from_paragraph = ( text ) ->\n  ### TAINT avoid to instantiate new parser for each paragraph ###\n  ### TAINT consider to use pipestreaming instead of looping ###\n  parse_html  = SP.HTML.new_onepiece_parser()\n  ctx_stack   = []\n  R           = []\n  for d in parse_html text\n    ### TAINT should check for matching tags ###\n    ### TAINT must also store HTML attributes ###\n    if ( select d, '<' )      then ctx_stack.push d.$key[ 1 .. ]\n    else if ( select d, '>' ) then ctx_stack.pop()\n    #.......................................................................................................\n    if ( select d, '<' ) and ( d.is_block ? false )\n      info CND.white '————————————————————————————————————— ' + d.$key\n      continue\n    #.......................................................................................................\n    if ( select d, '^text' )\n      text      = d.text.replace /\\n/g, ' '\n      slabs     = @slabs_from_text text\n      R.push slabs\n      # for slab in slabs.$value\n      #   rhs = if slab.rhs? then slab.rhs else null\n      opener  = \"<slug>\" + ( \"<#{element}>\" for element in ctx_stack ).join ''\n      closer  = \"</slug>\"\n      info ( CND.yellow opener ), \\\n        ( ( ( CND.blue reconstitute_text slab ) for slab in slabs.$value ). join CND.grey '|' ), \\\n        ( CND.yellow closer )\n      continue\n    whisper d.$key\n  #.........................................................................................................\n  return new_datom '^slab-blocks', R\n\n#-----------------------------------------------------------------------------------------------------------\n@slabs_from_text = ( text ) ->\n  text          = hyphenate text\n  ### TAINT benchmark against https://github.com/hfour/linebreak-ts ###\n  LineBreaker   = require 'linebreak'\n  breaker       = new LineBreaker text\n  prv_position  = 0\n  slabs         = []\n  ### LBO: line break opportunity ###\n  while ( lbo = breaker.nextBreak() )?\n    txt           = text[ prv_position ... lbo.position ]\n    prv_position  = lbo.position\n    last_codeunit = txt[ txt.length - 1 ]\n    slab          = {}\n    if last_codeunit is HYPHENATOR.soft_hyphen_chr\n      slab.rhs      = 'shy'\n      txt           = txt[ ... txt.length - 1 ]\n    else if last_codeunit is '\\u0020'\n      ### TAINT in the future, we might want to consider other breaking (fixed or variable) spaces ###\n      slab.rhs      = 'spc'\n      txt           = txt[ ... txt.length - 1 ]\n    # debug '^876^', jr txt\n    slab.txt = txt\n    slabs.push slab\n  return new_datom '^slabs', slabs\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_linebreak = ->\n  LineBreaker = require 'linebreak'\n  keep_hyphen = String.fromCodePoint 0x2011\n  shy         = String.fromCodePoint 0x00ad\n  nbsp        = String.fromCodePoint 0x00a0\n  text        = \"Super-cali#{keep_hyphen}frag#{shy}i#{shy}lis#{shy}tic\\nis a won#{shy}der#{shy}ful word我很喜歡這個單字。\"\n  breaker = new LineBreaker text\n  last = 0\n  ### LBO: line break opportunity ###\n  while ( lbo = breaker.nextBreak() )?\n    # get the string between the last break and this one\n    word  = text.slice last, lbo.position\n    xhy   = if isa.interplot_shy word then ( CND.gold '-' ) else ''\n    rq    = if lbo.required then '!' else ' '\n    word  = word.trimEnd()\n    info rq, ( jr word ), xhy\n    last = lbo.position\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_linebreak()\n  # @demo_hyphenation()\n  html = \"\"\"<p><strong>Letterpress</strong> printing is a <em>technique of relief printing using a printing\n  press,</em> a process by which many copies are produced by <em>repeated direct impression of an inked,\n  raised surface</em> against sheets or a continuous roll of paper.</p> <p>A worker composes and locks\n  movable type into the ‘bed’ or ‘chase’ of a press, inks it, and presses paper against it to transfer the\n  ink from the type which creates an impression on the paper.</p>\"\"\"\n  text = \"\"\"Letterpress printing is a technique of relief printing using a printing press.\"\"\"\n  html = \"\"\"<p>#{text}</p>\"\"\"\n  # urge @slabs_from_paragraph html\n  urge @slabs_from_text text\n\n\n"
  ]
}