{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/__obsolete__/ops-UNUSED.coffee"
  ],
  "names": [],
  "mappings": "AAA8G;EAAA;EAC5G,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAA,CAAA;AAC/B,QAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,eAAA,EAAA,IAAA,EAAA;IAAI,GAAA,CAAI,uCAAJ,EAA6C,KAAA,GAAQ,CAAA,CAAE,OAAF,CAArD,EAAJ;;;;;;;;;;;;;;IAcI;IACA,OAAA,GAAkB;IAClB,OAAA,GAAkB,OAAA,GAAU;IAC5B,IAAA,GAAkB,MAAM,CAAC,aAAP,CAAqB,MAArB;IAClB,IAAA,GAAkB,MAAM,CAAC,aAAP,CAAqB,MAArB,EAlBtB;;;;;;IAwBI,OAAA,GAAkB,OAAA,GAAU,mMAxBhC;;IA0BI,eAAA,GAAkB,CAAA,wBAAA,CAAA,CAA2B,OAA3B,CAAA,oBAAA,EA1BtB;;IA4BI,KAAK,CAAC,MAAN,CAAa,CAAA,CAAE,eAAF,CAAb;AACA,WAAO,CAAA,SAAA,CAAA,CAAY,OAAZ,CAAA;EA9BoB,EAD+E;;;EAkC5G,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,KAAF,CAAA,EAAA;;;;;AACvB,QAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,EAAA,aAAA,EAAA,YAAA,EAAA,CAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,SAAA,EAAA,GAAA,EAAA,OAAA,EAAA,eAAA,EAAA,SAAA,EAAA,aAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,OAAA,EAAA,aAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,cAAA,EAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA,cAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,UAuBiE,8BAvBjE,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA;IACI,OAAA,GACE;MAAA,GAAA,EAAK;QAAE,IAAA,EAAM;MAAR,CAAL;MACA,GAAA,EAAK;QAAE,KAAA,EAAO;MAAT,CADL;MAEA,GAAA,EAAK;QAAE,KAAA,EAAO;MAAT;IAFL,EAFN;;IAMI,UAAA,GAAkB,KAAK,CAAC,MAAM,CAAC;IAC/B,UAAA,GAAkB,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,EAArB;IAClB,cAAA,GAAkB,KARtB;;IAUI,KAAe,mGAAf;MACE,QAAA,GAAY;MACZ,QAAA,GAAY,CAAE,CAAE,OAAA,GAAU,CAAZ,EADpB;;MAGM,OAAA,GAAkB,CAAA,IAAA,CAAA,CAAO,OAAP,CAAA;MAClB,OAAA,GAAkB,CAAA,IAAA,CAAA,CAAO,OAAP,CAAA;MAClB,YAAA,GAAkB,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA;MAClB,aAAA,GAAkB,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA;MAClB,QAAA,GAAkB,QAAQ,CAAC,cAAT,CAAwB,OAAxB;MAClB,QAAA,GAAkB,QAAQ,CAAC,cAAT,CAAwB,OAAxB;MAClB,aAAA,GAAkB,QAAQ,CAAC,cAAT,CAAwB,YAAxB;MAClB,cAAA,GAAkB,QAAQ,CAAC,cAAT,CAAwB,aAAxB;MAClB,MAAO,kBAAA,IAAc,uBAAd,IAAiC,yBAAxC;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4BAAA,CAAA,CAA+B,OAA/B,CAAA,CAAV,EADR;;MAEA,UAAA,GAAkB,QAAQ,CAAC,qBAAT,CAAA,CAAgC,CAAC;MACnD,SAAA,GAAkB;MAClB,aAAA,GAAkB;MAClB,eAAA,GAAkB;AAElB;;MAAA,KAAA,sCAAA;;QACE,aAAA,GAAgB;QAChB,QAAA;QACA,QAAA;QACA,eAAA;;UACA,iBAAkB;;QAClB,IAAS,QAAA,IAAY,CAArB;AAAA,gBAAA;SALR;;QAOQ,aAAA,GAAgB,QAAA,KAAY,CAAC;QAC7B,YAAA,GAAgB,QAAA,KAAY,CAAC;QAC7B,CAAA,CAAE,GAAF,EAAO,GAAP,CAAA,GAAgB,IAAhB;;UACA,MAAgB;SAVxB;;QAYQ,IAAG,GAAA,KAAO,KAAV;UACE,IAAG,YAAH;YACE,GAAA,IAAO,IADT;WADF;SAAA,MAGK,IAAG,GAAA,KAAO,KAAV;UACH,KAAO,YAAP;YACE,GAAA,IAAO,IADT;WADG;SAfb;;;;;QAsBQ,IAAA,GAAgB,KAAK,CAAC,IAAN,CAAW,GAAX;QAChB,SAAA,GAAgB,IAAI,CAAE,CAAF;QACpB,QAAA,GAAgB,IAAI,CAAE,IAAI,CAAC,MAAL,GAAc,CAAhB;QACpB,IAAG,aAAA,IAAkB,6EAArB;UACE,QAAQ,CAAC,KAAK,CAAC,UAAf,GAA4B,OAD9B;;QAEA,IAAG,YAAA,IAAkB,6EAArB;UACE,QAAQ,CAAC,KAAK,CAAC,WAAf,GAA6B,OAD/B;SA3BR;;QA8BQ,OAAA,GAAc,QAAQ,CAAC,cAAT,CAAwB,GAAxB,EA9BtB;;QAgCQ,QAAQ,CAAC,kBAAT,CAA4B,WAA5B,EAAyC,GAAzC;MAjCF,CAlBN;;;;MAuDM,QAAQ,CAAC,SAAT,CAAA;MACA,SAAA,IAAgB;MAChB,SAAA,GAAgB,aAAa,CAAC,qBAAd,CAAA;MAChB,UAAA,GAAgB,cAAc,CAAC,qBAAf,CAAA;MAChB,QAAA,GAAgB,UAAU,CAAC,CAAX,GAAe,SAAS,CAAC;MAGzC,QAAA,GAAgB,qBAAA,CAAsB,QAAtB,EAAgC,SAAS,CAAC,MAA1C,EAAkD,GAAlD;MAChB,SAAA,GAAgB,qBAAA,CAAsB,QAAtB,EAAgC,UAAhC,EAAkD,GAAlD,EA/DtB;;MAiEM,OAAA,GAAgB;MAChB,aAAA,GAAgB,SAAA,GAAY,CAAE,CAAA,GAAI,OAAN;MAE5B,KAAgB,aAAhB;;AAAA,iBAAA;OApEN;;MAsEM,IAAG,eAAA,IAAmB,CAAtB;QACE,OAAA;QACA,QAAA;QACA,QAAA;QACA,eAAA;QACA,SAAA,GAAY;QACZ,QAAQ,CAAC,WAAT,CAAqB,QAAQ,CAAC,UAA9B,EANF;;MAQA,OAAA,GAAkB,CAAA,CAAE,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAF;MAClB,OAAA,GAAkB,OAAO,CAAC,IAAR,CAAa,MAAb;MAClB,WAAA,yDAAwD;MACxD,YAAA,0DAAwD;MACxD,KAAA,GAAkB,cAAA,GAAiB;MACnC,IAAA,GAAkB,QAAA,GAAW;MAC7B,GAAA,CAAI,SAAJ,EAAe,EAAA,CAAG,KAAH,CAAf;MACA,GAAA,CAAI,SAAJ,EAAe,EAAA,CAAG,CAAE,KAAK,CAAC,MAAM,CAAE,KAAF,CAAS,CAAC,GAAxB,EAA6B,KAAK,CAAC,MAAM,CAAE,IAAF,CAAQ,CAAC,GAAlD,CAAH,CAAf;MACA,OAAO,CAAC,UAAR,CAAmB,IAAnB;MACA,OAAO,CAAC,UAAR,CAAmB,oBAAnB;MACA,CAAE,OAAO,CAAC,IAAR,CAAa,MAAb,CAAF,CAAuB,CAAC,MAAxB,CAAA;MACA,IAAA,GAAkB,OAAO,CAAE,CAAF,CAAK,CAAC;MAC/B,CAAA,GAAkB;QAAE,IAAA,EAAM,OAAR;QAAiB,KAAjB;QAAwB,IAAxB;QAA8B,IAA9B;QAAoC,IAAA,EAAM;MAA1C;MAClB,IAAmC,mBAAnC;QAAA,CAAC,CAAC,WAAF,GAAkB,YAAlB;;MACA,IAAmC,oBAAnC;QAAA,CAAC,CAAC,YAAF,GAAkB,aAAlB;;AACA,aAAO;IA9FT;AA+FA,WAAO;EA1GY;AAlCuF",
  "sourcesContent": [
    "  #-----------------------------------------------------------------------------------------------------------\n  @demo_insert_html_fragment = ->\n    log '^OPS/demo_insert_html_fragment@34341^', stick = $ 'stick'\n    ### NOTE\n\n    Here we parse and insert an HTML fragment. We have to represent the *context* of the fragment—that is, the\n    sequence of open HTML tags at that point—so the browser can know what CSS rules to apply to the line. We\n    wrap the line into a generic `<div>` tag which will cause both jQuery (I guess) and the browser to close\n    all open tags at the end of the line. Without that tag, the last open `<em>` and its text would be missing\n    from the page (I guess jQuery does that, but not sure).\n\n    Observe that with this technique, we do *not* have to reproduce syntactically complete HTML fragments but\n    can let the browser do that for us; this appears to work with both inline and block tags such as `<p>`.\n    Keep in mind that some disparities as compared to regular rendering of a whole page may occur since some\n    CSS rules such as `text-align-last` do apply in this situation that would not apply had the line be\n    typeset in the middle of a paragraph. ###\n    xxx\n    context         = \"<p>\"\n    context         = context + \"<spleft/>\"\n    zwsp            = String.fromCodePoint 0x200b\n    zwnj            = String.fromCodePoint 0x200c\n    # content         = context + \"This<f/> is<f/> a<f/> <em>first<f/> bit<f/></em> of<f/> text.<f/> It<f/> is<f/> <strong>not<f/></strong> a<f/> <em>very<f/> long<f/> one.<f/>\"\n    # content         = context + \"This is a <em>first f#{zwnj}irst bit</em> of text. Yaffir stood high. (1) Yaf&shy;f&shy;ir (2) Yaf#{zwnj}f#{zwnj}ir. It is <strong>not</strong> a <em>very long one.\"\n    # content         = context + \"This is a <em>first f#{zwnj}irst bit</em> of text. <i>Yaffir stood high.\"\n    # content         = context + \"This<sp/>is<sp/>a<sp/><em>first<sp/>f#{zwnj}irst<sp/>bit</em><sp/>of<sp/>text.<sp/><i>Yaffir<sp/>stood<sp/>high.\"\n    # content         = context + \"This<sp/>is<sp/>a<sp/>text.<sp/><i>Yaffir<sp/>stood<sp/>high.\"\n    content         = context + \"<ng style='margin-left:-6Q;'>This</ng><ng>guy</ng><ng>called</ng><ng><em>Yaffir</em>,</ng><ng>he</ng><ng><strong>stood</strong></ng><ng><strong>high</strong>.</ng><ng>Hyphen-</ng><ng>able</ng>\"\n    # content         = context + \"<txt id=nr1>This is a </txt><em><txt id=nr2>first bit</txt></em><txt id=nr3> of text & a test. It is </txt><strong><txt id=nr4>not</txt></strong><txt id=nr5> a </txt><em><txt id=nr6>very long one.</txt>\"\n    wrapped_content = \"<div><span id=innerwrap>#{content}</span><flag/></div>\"\n    # content         = context + \"<a href='http://example.com'>This<flag/> is a <em>first bit</em> of text. It is <strong>not</strong> a <em>very long one.</a>\"\n    stick.append $ wrapped_content\n    return \"inserted #{content}\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  @demo_insert_slabs = ( slabs ) ->\n    ### TAINT should validate slabs ###\n    margins =\n      'Y': { left: '-2mm', }\n      '-': { right: '-3mm', }\n      '.': { right: '-3mm', }\n    #.........................................................................................................\n    slab_count      = slabs.$value.length\n    slug_count      = Math.min slab_count, 25\n    slab_lnr_start  = null\n    #.........................................................................................................\n    for line_nr in [ 1.. slug_count ]\n      slab_lnr  = 0\n      slab_rnr  = - ( line_nr + 1 )\n      #.......................................................................................................\n      slug_id         = \"slug#{line_nr}\"\n      trim_id         = \"trim#{line_nr}\"\n      left_flag_id    = \"lflag#{line_nr}\"\n      right_flag_id   = \"rflag#{line_nr}\"\n      slug_dom        = document.getElementById slug_id\n      trim_dom        = document.getElementById trim_id\n      left_flag_dom   = document.getElementById left_flag_id\n      right_flag_dom  = document.getElementById right_flag_id\n      unless trim_dom? and left_flag_dom? and right_flag_dom?\n        throw new Error \"^OPS@9872^ no such element ##{trim_id}\" ### TAINT use sth like `rpr` ###\n      slug_width      = slug_dom.getBoundingClientRect().width\n      line_text       = ''\n      prv_line_text   = null\n      line_slab_count = 0\n      #.......................................................................................................\n      for slab in slabs.$value\n        prv_line_text = line_text\n        slab_lnr++\n        slab_rnr++\n        line_slab_count++\n        slab_lnr_start ?= slab_lnr\n        break if slab_rnr >= 0\n        #.....................................................................................................\n        is_first_slab = slab_lnr is +1\n        is_last_slab  = slab_rnr is -1\n        { txt, rhs, } = slab\n        rhs          ?= 'tight'\n        #.....................................................................................................\n        if rhs is 'shy'\n          if is_last_slab\n            txt += '-'\n        else if rhs is 'spc'\n          unless is_last_slab\n            txt += ' '\n        #.....................................................................................................\n        ### Apply optical margin correction: ###\n        ### TAINT just a demo, must adjust to font, size, etc; also depends on user preferences ###\n        ### TAINT adjust width of `<trim/>` element ###\n        chrs          = Array.from txt\n        first_chr     = chrs[ 0 ]\n        last_chr      = chrs[ chrs.length - 1 ]\n        if is_first_slab and ( margin = margins[ first_chr ]?.left  )?\n          trim_dom.style.marginLeft = margin\n        if is_last_slab  and ( margin = margins[ last_chr  ]?.right )?\n          trim_dom.style.marginRight = margin\n        #.....................................................................................................\n        txt_dom     = document.createTextNode txt\n        # trim_dom.appendChild txt_dom\n        trim_dom.insertAdjacentText 'beforeend', txt\n      #.......................................................................................................\n      ### NOTE join adjacent text nodes, remove empty ones ###\n      ### TAINT better to first join texts ###\n      trim_dom.normalize()\n      line_text    += txt\n      left_rect     = left_flag_dom.getBoundingClientRect()\n      right_rect    = right_flag_dom.getBoundingClientRect()\n      delta_px      = right_rect.x - left_rect.x\n      ### NOTE flag must always have a nominal height of 1mm ###\n      ### NOTE precision only applied for readability ###\n      delta_mm      = get_approximate_ratio delta_px, left_rect.height, 100\n      delta_rel     = get_approximate_ratio delta_px, slug_width,       100\n      # delta_pct     = ( get_approximate_ratio delta_px, slug_width,     100 ) * 100\n      epsilon       = 0.01\n      line_too_long = delta_rel > ( 1 + epsilon )\n      ### TAINT must implement handling single line, last line ###\n      continue unless line_too_long\n      # log '^2298^', \"delta: #{delta_mm} mm, #{delta_rel} rel, #{jr line_text}\"\n      if line_slab_count >= 2\n        line_nr--\n        slab_lnr--\n        slab_rnr--\n        line_slab_count--\n        line_text = prv_line_text\n        trim_dom.removeChild trim_dom.firstChild\n      ### TAINT rewrite using DOM methods if faster ###\n      slug_jq         = $ \"#slug#{line_nr}\"\n      trim_jq         = slug_jq.find 'trim'\n      margin_left     = ( trim_jq[ 0 ].style.marginLeft   ) ? null\n      margin_right    = ( trim_jq[ 0 ].style.marginRight  ) ? null\n      start           = slab_lnr_start - 1\n      stop            = slab_lnr - 2\n      log '^33321^', jr slabs\n      log '^33321^', jr [ slabs.$value[ start ].txt, slabs.$value[ stop ].txt, ]\n      slug_jq.removeAttr 'id'\n      trim_jq.removeAttr 'id contenteditable'\n      ( slug_jq.find 'flag' ).remove()\n      html            = slug_jq[ 0 ].outerHTML\n      R               = { $key: '$slug', start, stop, html, text: line_text, }\n      R.margin_left   = margin_left   if margin_left?\n      R.margin_right  = margin_right  if margin_right?\n      return R\n    return null\n"
  ]
}