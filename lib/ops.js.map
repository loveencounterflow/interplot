{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "AACA;AAAA,MAAA;;EAAA,WAAA,GAAc,QAAA,CAAA,CAAA,EAAA;;IAGZ,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BzB,aAAO;IA3BkB,EAD7B;;;;;;;;;;;;;;;;;IA8CE,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,KAAF,EAAS,YAAT,EAAuB,YAAvB,CAAA,EAAA;;AACvB,UAAA,CAAA,EAAA,aAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MACI,IAAA,GAAY;MACZ,SAAA,GAAY;MACZ,KAAgB,iIAAhB;QACE,aAAA,GAAgB,QAAA,KAAY;QAC5B,YAAA,GAAgB,QAAA,KAAY;QAC5B,IAAA,GAAgB,KAAK,CAAE,QAAF;QACrB,CAAA,CAAE,GAAF,EAAO,GAAP,CAAA,GAAgB,IAAhB,EAHN;;AAKM,8BAAO,MAAM,IAAb;AAAA,eACO,IADP;YACiB;AAAV;;AADP,eAGO,KAHP;YAII,IAAG,YAAH;cACE,GAAA,IAAO,IADT;;AADG;;AAHP,eAOO,KAPP;YAQI,KAAO,YAAP;cACE,SAAA;cACA,GAAA,IAAO,IAFT;;AADG;AAPP;;;YAaO,IAAA,CAAK,uCAAL,EAA8C,CAAA,kBAAA,CAAA,CAAqB,EAAA,CAAG,GAAH,CAArB,CAAA,CAA9C;AAbP,SALN;;QAoBM,IAAA,IAAQ;MArBV,CAHJ;;AA0BI,aAAO,CAAE,IAAF,EAAQ,SAAR,EAAmB,YAAnB,EAAiC,YAAjC;IA3BY,EA9CvB;;IA4EE,IAAC,CAAA,qCAAD,GAAyC,QAAA,CAAE,GAAF,EAAO,YAAP,CAAA,EAAA,EA5E3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0GE,IAAC,CAAA,0BAAD,GAA8B,MAAA,QAAA,CAAE,GAAF,EAAO,YAAP,CAAA;AAChC,UAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,OAAA,EAAA,YAAA,EAAA,OAAA,EAAA;MAAI,OAAA,GAAoB,CAAA,CAAE,GAAG,CAAC,aAAN;MACpB,OAAA,GAAoB,OAAO,CAAC,IAAR,CAAa,MAAb;MACpB,UAAA,GAAoB,GAAG,CAAC,UAAU,CAAE,GAAG,CAAC,WAAN,EAFtC;;;MAKI,OAAO,CAAE,CAAF,CAAK,CAAC,kBAAb,CAAgC,WAAhC,EAA6C,YAAY,CAAC,IAA1D;MACA,UAAU,CAAC,qBAAX,CAAiC,WAAjC,EAA8C,OAAO,CAAE,CAAF,CAArD;MACA,QAAA,GAAoB,KAAK,CAAC,WAAN,CAAkB,OAAlB;MACpB,YAAA,GAAoB,QAAA,GAAW,GAAG,CAAC;MACnC,YAAA,GAAuB,YAAY,CAAC,SAAb,GAAyB,CAA5B,GAAmC,IAAnC,GAA6C,CAAC,CAAE,YAAA,GAAe,YAAY,CAAC,SAA9B,EATtE;;;;;;;;MAiBI,UAAA,GAAoB,YAAA,IAAgB,GAAG,CAAC;MACxC,IAAiB,GAAG,CAAC,SAArB;QAAA,MAAM,KAAA,CAAM,CAAN,EAAN;;MACA,OAAO,CAAC,MAAR,CAAA;AACA,aAAO,CAAE,OAAF,EAAW,QAAX,EAAqB,YAArB,EAAmC,YAAnC,EAAiD,UAAjD;IArBqB,EA1GhC;;IAkIE,IAAC,CAAA,mBAAD,GAAuB,QAAA,CAAE,GAAF,CAAA;AACzB,UAAA,UAAA,EAAA,SAAA,EAAA;MAAI,MAAA,GAAc,KAAK,CAAC,UAAN,CAAiB,GAAG,CAAC,UAAU,CAAC,MAAf,CAAA,CAAuB,CAAC,GAAzC;MACd,UAAA,GAAc,MAAA,GAAS,GAAG,CAAC;MAC3B,SAAA,GAAc,GAAG,CAAC,gBAAJ,GAAuB;AACrC,aAAO,CAAE,UAAF,EAAc,SAAd;IAJc,EAlIzB;;IAyIE,IAAC,CAAA,WAAD,GAAe,MAAA,QAAA,CAAA,CAAA;AACjB,UAAA,CAAA;;;;;;MAKI,GAAA,CAAI,2BAAJ;MACA,CAAA,GAAsB,CAAA,EAN1B;;;MASI,GAAA,CAAI,2BAAJ,EAAiC,iBAAjC,EAAoD,CAAA,MAAM,cAAA,CAAA,CAAN,CAApD;MACA,CAAC,CAAC,aAAF,GAAsB,CAAA,CAAE,4BAAF;MACtB,CAAC,CAAC,UAAF,GAAsB,CAAE,CAAA,CAAE,YAAF,CAAF,CAAkB,CAAC,IAAnB,CAAwB,QAAxB;MACtB,CAAC,CAAC,WAAF,GAAsB;MACtB,CAAC,CAAC,SAAF,GAAsB,CAAA,CAAE,CAAC,CAAC,UAAU,CAAE,CAAC,CAAC,WAAJ,CAAd;MACtB,CAAC,CAAC,UAAF,GAAsB,KAAK,CAAC,UAAN,CAAoB,CAAC,CAAC,SAAS,CAAC,MAAZ,CAAA,CAAoB,CAAC,GAAzC;MACtB,CAAC,CAAC,eAAF,GAAsB,KAAK,CAAC,WAAN,CAAoB,CAAC,CAAC,SAAtB;MACtB,CAAC,CAAC,gBAAF,GAAsB,KAAK,CAAC,YAAN,CAAoB,CAAC,CAAC,SAAtB,EAhB1B;;;;MAoBI,CAAC,CAAC,UAAF,GAAsB,CAAA,CAAE,gCAAF;MACtB,GAAA,CAAI,2BAAJ,EAAiC,aAAjC,EAAgD,CAAC,CAAC,SAAlD;MACA,GAAA,CAAI,2BAAJ,EAAiC,cAAjC,EAAiD,CAAC,CAAC,UAAnD;MACA,CAAC,CAAC,SAAS,CAAC,MAAZ,CAAmB,CAAC,CAAC,UAArB;MACA,CAAC,CAAC,UAAF,GAAsB,IAxB1B;;MA0BI,CAAC,CAAC,oBAAF,GAAyB;MACzB,CAAC,CAAC,oBAAF,GAAyB;MACzB,CAAC,CAAC,SAAF,GAAsB;AACtB,aAAO;IA9BM,EAzIjB;;WA0KE,IAAC,CAAA,6BAAD,GAAiC,MAAA,QAAA,CAAE,SAAF,EAAa,QAAb,CAAA;AACnC,UAAA,CAAA,EAAA,SAAA,EAAA,GAAA,EAAA,QAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,KAAA,EAAA,YAAA;;;;MAGI,GAAA,CAAI,4CAAJ;MACA,QAAA,GAAsB;QAAE,YAAA,EAAc;MAAhB;MACtB,QAAA,GAAsB,CAAE,GAAA,QAAF,EAAe,GAAA,QAAf;MACtB,KAAA,GAAsB,SAAS,CAAC;MAChC,CAAA,CAAE,YAAF,CAAA,GAAsB,QAAtB;MACA,aAAA,GAAsB,KAAK,CAAC,MAAN,GAAe;MACrC,YAAA,GAAsB,YAAA,GAAe;MACrC,gBAAA,GAAsB;MACtB,YAAA,GAAsB;MACtB,OAAA,GAAsB;MACtB,CAAA,GAAsB,GAb1B;;MAeI,YAAA,GAAe,KAAA,CAAE,YAAF,CAAA,GAAA;AACnB,YAAA,KAAA,EAAA;QAAM,OAAA;QACA,CAAC,CAAC,IAAF,CAAO,YAAP;QACA,YAAY,CAAC,IAAb,GAAoB,OAAA,CAAQ,YAAY,CAAC,OAArB,EAF1B;;QAIM,IAAG,GAAG,CAAC,oBAAJ,IAA6B,CAAE,KAAA,GAAQ,YAAY,CAAC,OAAO,CAAC,IAArB,CAAA,CAA2B,CAAC,KAA5B,CAAkC,UAAlC,CAAV,CAAwD,CAAC,MAAzD,KAAmE,CAAE,UAArG;;;UAGE,YAAY,CAAC,OAAO,CAAC,IAArB,CAA0B,CAAA,MAAA,CAAA,CAAS,KAAK,CAAE,CAAF,CAAd,CAAA,8BAAA,CAAA,CAAoD,KAAK,CAAE,CAAF,CAAzD,CAAA,QAAA,CAAA,CAAyE,KAAK,CAAE,CAAF,CAA9E,CAAA,OAAA,CAA1B,EAHF;SAJN;;QASM,GAAG,CAAC,UAAU,CAAC,MAAf,CAAsB,YAAY,CAAC,OAAnC;QACA,cAAA,GAAoB,IAAC,CAAA,mBAAD,CAAqB,GAArB;QACpB,GAAA,CAAI,SAAJ,EAAe,OAAf,EAAwB,CAAA,CAAA,CAAG,cAAc,CAAC,UAAU,CAAC,OAA1B,CAAkC,CAAlC,CAAH,CAAA,MAAA,CAAA,CAA+C,cAAc,CAAC,SAAS,CAAC,OAAzB,CAAiC,CAAjC,CAA/C,CAAA,GAAA,CAAxB;QACA,IAAiB,GAAG,CAAC,SAArB;UAAA,MAAM,KAAA,CAAM,CAAN,EAAN;;QACA,OAAO,YAAY,CAAC;AACpB,eAAO;MAfM,EAfnB;;MAgCI,GAAA,GAAgB,CAAA,MAAM,IAAC,CAAA,WAAD,CAAA,CAAN;MAChB,GAAA,CAAI,QAAJ,EAAc,MAAd,EAAsB,GAAtB;MACA,GAAG,CAAC,SAAJ,GAAgB;MAChB,GAAG,CAAC,SAAJ,GAAgB;MAChB,SAAA,GAAgB;AAEhB,aAAA,IAAA,GAAA;;QACE,SAAA;QACA,IAAS,SAAA,GAAY,EAArB;AAAA,gBAAA;;QACA,YAAA,GAFN;;QAIM,IAAG,YAAA,GAAe,aAAlB;;UAEE,IAAG,wBAAH;YACE,YAAA,CAAa,gBAAb;YACA,gBAAA,GAAoB,KAFtB;;AAGA,gBALF;;QAMA,YAAA,GAAgB,IAAC,CAAA,iBAAD,CAAmB,KAAnB,EAA0B,YAA1B,EAAwC,YAAxC;QAChB,YAAA,GAAgB,CAAA,MAAM,IAAC,CAAA,0BAAD,CAA4B,GAA5B,EAAiC,YAAjC,CAAN,EAXtB;;QAaM,KAAO,YAAY,CAAC,UAApB;;UAEE,IAAG,wBAAH;YACE,YAAA,GAAe,aAAzB;YACU,YAAA,CAAa,gBAAb;YACA,gBAAA,GAAoB;AACpB,qBAJF;;UAKA,YAAA,GAAe,YAAA,GAAe;UAC9B,YAAA,CAAa,YAAb;AACA,mBATF;SAbN;;QAwBM,gBAAA,GAAmB;MAzBrB,CAtCJ;;AAiEI,aAAO;IAlEwB;EA5KrB,EAAd;;;EAkPA,WAAW,CAAC,KAAZ,CAAkB,UAAU,CAAC,GAAX,GAAiB,CAAA,CAAnC;AAlPA",
  "sourcesContent": [
    "\nprovide_ops = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @demo_wait_for_dom_ready = ->\n    ###\n    thx to https://stackoverflow.com/a/48514876/7568091\n\n    The observer event handler will trigger whenever any node is added or removed from the document. Inside\n    the handler, we then perform a contains check to determine if myElement is now in the document.\n\n    You don't need to iterate over each MutationRecord stored in mutations because you can perform the\n    document.contains check directly upon myElement.\n\n    To improve performance, replace document with the specific element that will contain myElement in the DOM.\n\n    ###\n    ###\n    var myElement = $(\"<div>hello world</div>\")[0];\n\n    var observer = new MutationObserver(function(mutations) {\n       if (document.contains(myElement)) {\n            console.log(\"It's in the DOM!\");\n            observer.disconnect();\n        }\n    });\n\n    observer.observe(document, {attributes: false, childList: true, characterData: false, subtree:true});\n\n    $(\"body\").append(myElement); // console.log: It's in the DOM!\n    ###\n    return null\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # @_context_from_linenr = ( line_nr ) ->\n  #   R                 = {}\n  #   R.slug_id         = \"slug#{line_nr}\"\n  #   R.trim_id         = \"trim#{line_nr}\"\n  #   # R.left_flag_id    = \"lflag#{line_nr}\"\n  #   # R.right_flag_id   = \"rflag#{line_nr}\"\n  #   R.slug_dom        = document.getElementById R.slug_id\n  #   R.trim_dom        = document.getElementById R.trim_id\n  #   # R.lflag_dom       = document.getElementById R.left_flag_id\n  #   # R.rflag_dom       = document.getElementById R.right_flag_id\n  #   R.slug_rect       = as_plain_object R.slug_dom.getBoundingClientRect()\n  #   R.trim_rect       = as_plain_object R.trim_dom.getBoundingClientRect()\n  #   return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_get_partial_slug = ( slabs, min_slab_idx, max_slab_idx ) ->\n    ### TAINT also return text usable on next invocation so that part will not have to be computed again ###\n    text      = ''\n    spc_count = 0\n    for slab_idx in [ min_slab_idx .. max_slab_idx ]\n      is_first_slab = slab_idx is min_slab_idx\n      is_last_slab  = slab_idx is max_slab_idx\n      slab          = slabs[ slab_idx ]\n      { txt, rhs, } = slab\n      #.......................................................................................................\n      switch rhs ? null\n        when null then null\n        #.....................................................................................................\n        when 'shy'\n          if is_last_slab\n            txt += '-'\n        #.....................................................................................................\n        when 'spc'\n          unless is_last_slab\n            spc_count++\n            txt += ' '\n        #.....................................................................................................\n        ### TAINT may wanrt to throw error or inform parent process ###\n        else warn '^interplot/OPS/_get_partial_slug@8012', \"ignoring slab.rhs #{jr rhs}\"\n      #.......................................................................................................\n      text += txt\n    #.........................................................................................................\n    return { text, spc_count, min_slab_idx, max_slab_idx, }\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_adapt_margins_to_hanging_punctuation = ( ctx, partial_slug ) ->\n    # ### Apply optical margin correction: ###\n    ### a.k.a. margin kerning, optical margin alignment ###\n    ### see https://de.wikipedia.org/wiki/PdfTeX#Mikrotypographische_Erweiterungen ###\n    ### see https://en.wikipedia.org/wiki/Hanging_punctuation ###\n    ### see https://en.wikipedia.org/wiki/Optical_margin_alignment ###\n    ### \"Suggested Values for Optical Justification\" (https://en.wikipedia.org/wiki/Optical_margin_alignment)\n\n      These values may be suitable for common seriffed fonts like Times New Roman, Palatino, or Garamond.\n      Other fonts may need different values.\n\n      Characters  Value\n      \" “ ” ' ‘ ’, .  100%\n      hyphen  75%\n      en-dash 50%\n      em-dash 25%\n      A T V W Y 20%\n      C O 10%\n    ###\n    # ### TAINT just a demo, must adjust to font, size, etc; also depends on user preferences ###\n    # ### TAINT adjust width of `<trim/>` element ###\n    # chrs          = Array.from txt\n    # first_chr     = chrs[ 0 ]\n    # last_chr      = chrs[ chrs.length - 1 ]\n    # if is_first_slab and ( margin = margins[ first_chr ]?.left  )?\n    #   trim_dom.style.marginLeft = margin\n    # if is_last_slab  and ( margin = margins[ last_chr  ]?.right )?\n    #   trim_dom.style.marginRight = margin\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_metrics_from_partial_slug = ( ctx, partial_slug ) ->\n    slug_jq           = $ ctx.slug_template\n    trim_jq           = slug_jq.find 'trim'\n    column_dom        = ctx.columns_jq[ ctx.columns_idx ] ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    # column_height_mm  = GAUGE.height_mm_of column_dom\n    #.........................................................................................................\n    trim_jq[ 0 ].insertAdjacentText 'beforeend', partial_slug.text\n    column_dom.insertAdjacentElement 'beforeend', slug_jq[ 0 ]\n    width_mm          = GAUGE.width_mm_of trim_jq\n    overshoot_mm      = width_mm - ctx.column_width_mm\n    spc_delta_mm      = if partial_slug.spc_count < 1 then null else -( overshoot_mm / partial_slug.spc_count )\n    # slug_height_mm    = GAUGE.height_mm_of slug_jq\n    # slug_top_mm       = GAUGE.mm_from_px slug_jq.offset().top\n    # slug_bottom_mm    = slug_height_mm + slug_top_mm\n    # log '^44342^', column_height_mm, slug_bottom_mm, slug_jq[ 0 ]\n    ### NOTE here we use a boolean quality assessment; a more refined algorithm should use points for\n    to differentiate between less and more desirable fittings based on delta space added to or subtracted\n    from all space characters, presence or absence of hyphen and so on ###\n    fitting_ok        = overshoot_mm <= ctx.epsilon_mm\n    await sleep 0 if ctx.live_demo\n    slug_jq.remove()\n    return { slug_jq, width_mm, overshoot_mm, spc_delta_mm, fitting_ok, }\n\n  #-----------------------------------------------------------------------------------------------------------\n  @get_pointer_metrics = ( ctx ) ->\n    top_mm      = GAUGE.mm_from_px ctx.pointer_jq.offset().top\n    advance_mm  = top_mm - ctx.column_top\n    remain_mm   = ctx.column_height_mm - advance_mm\n    return { advance_mm, remain_mm, }\n\n  #-----------------------------------------------------------------------------------------------------------\n  @get_context = ->\n    ### NOTE intermediate solution; later on, the pointer should be set by some higher level method to\n    indicate where upcoming material should be directed to; setting up columns will then consisting of\n    locating the `pointer#pointer` element, then retrieving its parent element (the first column to\n    consider) and the columns that either follow it according to a special 'text flow' attribute or (the\n    default) in document order. ###\n    log '^ops/get_context@66855-1^'\n    R                   = {}\n    ### TANT fix in template-elments ###\n    # R.slug_template     = await TEMPLATES_slug() ### use single composer !!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    log '^ops/get_context@66855-1^', 'R.slug_template', await TEMPLATES_slug()\n    R.slug_template     = $ \"<slug><trim></trim></slug>\"\n    R.columns_jq        = ( $ 'page:first' ).find 'column'\n    R.columns_idx       = 0\n    R.column_jq         = $ R.columns_jq[ R.columns_idx ]\n    R.column_top        = GAUGE.mm_from_px    R.column_jq.offset().top\n    R.column_width_mm   = GAUGE.width_mm_of   R.column_jq\n    R.column_height_mm  = GAUGE.height_mm_of  R.column_jq\n    # R.pointer_jq        = R.column_jq.find '#pointer'\n    ### TANT fix in template-elments ###\n    # R.pointer_jq        = $ ( await TEMPLATES_pointer() )[ 0 ]\n    R.pointer_jq        = $ \"<pointer id=pointer></pointer>\"\n    log '^ops/get_context@66855-1^', 'R.column_jq', R.column_jq\n    log '^ops/get_context@66855-1^', 'R.pointer_jq', R.pointer_jq\n    R.column_jq.append R.pointer_jq\n    R.epsilon_mm        = 0.2\n    #.........................................................................................................\n    R.XXX_insert_big_words = true\n    R.XXX_insert_big_words = false\n    R.live_demo         = true\n    return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @slugs_with_metrics_from_slabs = ( slabs_dtm, settings ) ->\n    ### TAINT how to use intertype in browser context? ###\n    # validate.interplot_slabs_datom slabs_dtm\n    ### TAINT use intertype for defaults ###\n    log '^ops/slugs_with_metrics_from_slabs@4455-1^'\n    defaults            = { min_slab_idx: 0, }\n    settings            = { defaults..., settings..., }\n    slabs               = slabs_dtm.$value\n    { min_slab_idx, }   = settings\n    last_slab_idx       = slabs.length - 1\n    max_slab_idx        = min_slab_idx - 1\n    prv_slug_metrics    = null\n    slug_metrics        = null\n    line_nr             = 0\n    R                   = []\n    #.........................................................................................................\n    push_metrics = ( slug_metrics ) =>\n      line_nr++\n      R.push slug_metrics\n      slug_metrics.html = as_html slug_metrics.slug_jq\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      if ctx.XXX_insert_big_words and ( parts = slug_metrics.slug_jq.text().split /(raised)/ ).length is 3 ### !!!! ###\n        # slug_metrics.slug_jq.html \"#{parts[ 0 ]}<span style='font-size:300%'>g#{parts[ 1 ]}y</span>#{parts[ 2 ]}\"\n        ### NOTE `<trim/>` needed for proper baseline-alignment ###\n        slug_metrics.slug_jq.html \"<trim>#{parts[ 0 ]}<span style='font-size:300%'>g#{parts[ 1 ]}y</span>#{parts[ 2 ]}</trim>\"\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      ctx.pointer_jq.before slug_metrics.slug_jq\n      reglet_metrics    = @get_pointer_metrics ctx\n      log '^33442^', line_nr, \"#{reglet_metrics.advance_mm.toFixed 1} mm / #{reglet_metrics.remain_mm.toFixed 1} mm\" # , slug_metrics.slug_jq[ 0 ]\n      await sleep 0 if ctx.live_demo\n      delete slug_metrics.slug_jq\n      return null\n    #.........................................................................................................\n    ctx           = await @get_context()\n    log '^3334^', \"ctx:\", ctx\n    ctx.live_demo = false\n    ctx.live_demo = true\n    XXX_count     = 0\n    #.........................................................................................................\n    loop\n      XXX_count++\n      break if XXX_count > 20\n      max_slab_idx++\n      ### TAINT add prv_slug_metrics to R where missing ###\n      if max_slab_idx > last_slab_idx\n        ### flush ###\n        if prv_slug_metrics?\n          push_metrics prv_slug_metrics\n          prv_slug_metrics  = null\n        break\n      partial_slug  = @_get_partial_slug slabs, min_slab_idx, max_slab_idx\n      slug_metrics  = await @_metrics_from_partial_slug ctx, partial_slug\n      #.......................................................................................................\n      unless slug_metrics.fitting_ok\n        ### flush ###\n        if prv_slug_metrics?\n          min_slab_idx = max_slab_idx # - 1\n          push_metrics prv_slug_metrics\n          prv_slug_metrics  = null\n          continue\n        min_slab_idx = max_slab_idx + 1\n        push_metrics slug_metrics\n        continue\n      #.......................................................................................................\n      prv_slug_metrics = slug_metrics\n    #.........................................................................................................\n    return R\n\n\n############################################################################################################\nprovide_ops.apply globalThis.OPS = {}\n\n\n"
  ]
}