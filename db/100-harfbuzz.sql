

-- \set ECHO queries

/* ###################################################################################################### */
\ir './_trm.sql'
-- \ir './set-signal-color.sql'
-- \ir './test-begin.sql'
-- \pset pager on
\timing off
\set filename intershop/100-harfbuzz.sql
\set signal :green

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 1 }———:reset
drop schema if exists HARFBUZZ cascade;
create schema HARFBUZZ;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 2 }———:reset
create table HARFBUZZ.x (
    nr          integer generated by default as identity,
    upem        jsonb,
    gid         jsonb,
    cluster     jsonb,
    x_advance   jsonb,
  primary key ( nr ) );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 3 }———:reset
create type HARFBUZZ.hrfb_glyphadvance as (
    gid         integer,
    upem        integer,
    cluster     integer,
    x_advance   float );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 4 }———:reset
set role dba;
create function HARFBUZZ.get_detailed_metrics( _text text )
  returns setof HARFBUZZ.hrfb_glyphadvance strict immutable language plpython3u as $$
  plpy.execute( 'select U.py_init()' ); ctx = GD[ 'ctx' ]
  import myharfbuzz as MHB
  ds = MHB.get_detailed_metrics( ctx, _text )
  ctx.log( '^236767^', ds )
  for d in ds:
    yield d
  $$;
reset role;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 5 }———:reset
set role dba;
create function HARFBUZZ.width_from_text( _text text, _size float default 1 )
  returns float strict immutable language plpython3u as $$
  plpy.execute( 'select U.py_init()' ); ctx = GD[ 'ctx' ]
  import myharfbuzz as MHB
  return MHB.width_from_text( ctx, _text, _size )
  $$;
reset role;

-- -- ---------------------------------------------------------------------------------------------------------
-- \echo :signal ———{ :filename 6 }———:reset
-- set role dba;
-- create function HARFBUZZ._positions_from_text( _text text )
--   returns jsonb strict immutable language plpython3u as $$
--   plpy.execute( 'select U.py_init()' ); ctx = GD[ 'ctx' ]
--   import myharfbuzz as MHB
--   R = MHB.demo_uharfbuzz( ctx, _text )
--   return JSON.dumps( R )
--   $$;
-- reset role;

-- -- ---------------------------------------------------------------------------------------------------------
-- create function HARFBUZZ.positions_from_text( ¶text text )
--   returns setof HARFBUZZ.x strict immutable language sql as $$
--     select * from jsonb_populate_recordset( null::HARFBUZZ.x, HARFBUZZ._positions_from_text( ¶text ) ); $$;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 7 }———:reset
set role dba;
create function HARFBUZZ.f() returns void strict immutable language plpython3u as $$
  plpy.execute( 'select U.py_init()' ); ctx = GD[ 'ctx' ]
  import myharfbuzz as MHB
  MHB.f( ctx )
  $$;
reset role;




/* ###################################################################################################### */
\echo :red ———{ :filename 3 }———:reset
\quit






